  import pandas as pd
import gradio as gr
from collections import defaultdict

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: str(row['CRDS Party Code']).strip().replace(" ", "") +
                    "3" +
                    str(row['Post Direction']).strip().replace(" ", ""),
        axis=1
    ).tolist()

def apply_exclusion_rules(df_algo, df_star, column, condition, value):
    excluded_algo = pd.DataFrame()
    excluded_star = pd.DataFrame()
    if column in df_algo.columns:
        if condition == "=":
            excluded_algo = df_algo[df_algo[column] == value]
            df_algo = df_algo[df_algo[column] != value]
        elif condition == "!=":
            excluded_algo = df_algo[df_algo[column] != value]
            df_algo = df_algo[df_algo[column] == value]
    if column in df_star.columns:
        if condition == "=":
            excluded_star = df_star[df_star[column] == value]
            df_star = df_star[df_star[column] != value]
        elif condition == "!=":
            excluded_star = df_star[df_star[column] != value]
            df_star = df_star[df_star[column] == value]
    return df_algo, df_star, excluded_algo, excluded_star

def reconcile_files(algo_file, star_file, column, condition, value):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    # Apply exclusion rules
    df_algo, df_star, excluded_algo, excluded_star = apply_exclusion_rules(df_algo, df_star, column, condition, value)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched = []

    star_key_map = defaultdict(list)
    for idx, key in enumerate(star_keys):
        star_key_map[key].append(idx)

    matched_star_indices = set()
    matched_algo_indices = set()
    star_key_used_count = defaultdict(int)

    for i, algo_key in enumerate(algo_keys):
        matching_star_idxs = star_key_map.get(algo_key, [])
        if len(matching_star_idxs) == 1 and matching_star_idxs[0] not in matched_star_indices:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": star_keys[matching_star_idxs[0]],
                "Status": "Match"
            })
            matched_star_indices.add(matching_star_idxs[0])
            matched_algo_indices.add(i)
            star_key_used_count[star_keys[matching_star_idxs[0]]] += 1
        elif len(matching_star_idxs) > 1:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Multiple STAR Match>",
                "Status": "Mismatch - Multiple STAR Keys"
            })
            for idx in matching_star_idxs:
                unmatched.append({
                    "ALGO Key": "<No Match>",
                    "STAR Key": star_keys[idx],
                    "Status": "Mismatch - STAR Key in Multiple Match"
                })
            matched_algo_indices.add(i)
            for idx in matching_star_idxs:
                star_key_used_count[star_keys[idx]] += 1
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No STAR Match"
            })

    for idx, star_key in enumerate(star_keys):
        if idx not in matched_star_indices and star_key_used_count[star_key] == 0:
            unmatched.append({
                "ALGO Key": "<No Match>",
                "STAR Key": star_key,
                "Status": "Mismatch - No ALGO Match"
            })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)
    excluded_df = pd.concat([excluded_algo, excluded_star], ignore_index=True)

    return (
        matched_df,
        unmatched_df,
        excluded_df,
        matched_df.to_csv(index=False),
        unmatched_df.to_csv(index=False),
        excluded_df.to_csv(index=False),
        f"Matched: {len(matched_df)} | Unmatched: {len(unmatched_df)} | Excluded: {len(excluded_df)}"
    )

demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV"),
        gr.File(label="Upload STAR CSV"),
        gr.Dropdown(choices=["Agreement_name", "CRDS Party Code", "Post Direction", "Agreed Amount"], label="Column"),
        gr.Radio(choices=["=", "!="], label="Condition"),
        gr.Textbox(label="Value")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Dataframe(label="Excluded Records"),
        gr.File(label="Download Matched CSV"),
        gr.File(label="Download Unmatched CSV"),
        gr.File(label="Download Excluded CSV"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation Tool with Exclusion Logic & Downloads",
    description="Upload ALGO and STAR CSVs, apply exclusion rules, and download the results."
)

demo.launch()  
