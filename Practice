import pandas as pd
import gradio as gr

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    result = []

    for i, algo_key in enumerate(algo_keys):
        status = "Match" if algo_key in star_keys else "Mismatch"
        matched_star = algo_key if status == "Match" else "<Not Found>"

        result.append({
            "Row": i + 1,
            "ALGO Key": algo_key,
            "Matching STAR Key": matched_star,
            "Status": status
        })

    return pd.DataFrame(result)

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=gr.Dataframe(label="Comparison Result"),
    title="Reconciliation App - Flexible Matching",
    description="Each ALGO key is matched against all STAR keys (not index-wise)."
)

demo.launch()









improved -shows match

import pandas as pd
import gradio as gr

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched_algo = []
    unmatched_star = star_keys.copy()

    for algo_key in algo_keys:
        if algo_key in star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            unmatched_star.remove(algo_key)
        else:
            unmatched_algo.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Not Found>",
                "Status": "Mismatch"
            })

    for star_key in unmatched_star:
        unmatched_algo.append({
            "ALGO Key": "<Not Found>",
            "STAR Key": star_key,
            "Status": "Mismatch"
        })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched_algo)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched_algo)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Match vs Mismatch",
    description="Compares ALGO and STAR files by key, showing matched/unmatched rows and summary."
)

demo.launch()













the perfect code 

import pandas as pd
import gradio as gr
from collections import Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    star_counter = Counter(star_keys)
    used_star_keys = set()

    matched = []
    unmatched = []

    for algo_key in algo_keys:
        if star_counter[algo_key] == 1 and algo_key not in used_star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            used_star_keys.add(algo_key)
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Not Found or Duplicate>",
                "Status": "Mismatch"
            })

    # Add remaining unmatched STAR keys
    for star_key in star_keys:
        if star_key not in used_star_keys and star_keys.count(star_key) == 1:
            unmatched.append({
                "ALGO Key": "<Not Found>",
                "STAR Key": star_key,
                "Status": "Mismatch"
            })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Strict 1:1 Matching",
    description="Only one ALGO key can match exactly one STAR key. Duplicates lead to mismatch."
)

demo.launch()










perfection defined 


import pandas as pd
import gradio as gr
from collections import Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    star_counter = Counter(star_keys)
    used_star_keys = set()

    matched = []
    unmatched = []

    for algo_key in algo_keys:
        count = star_counter[algo_key]
        if count == 1 and algo_key not in used_star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            used_star_keys.add(algo_key)
        elif count > 1:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Duplicate in STAR>",
                "Status": "Mismatch - Duplicate"
            })
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No Match"
            })

    # Remaining unmatched STAR keys
    for star_key in star_keys:
        if star_key not in used_star_keys and star_counter[star_key] == 1:
            unmatched.append({
                "ALGO Key": "<No Match>",
                "STAR Key": star_key,
                "Status": "Mismatch - No Match"
            })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Detailed 1:1 Matching",
    description="Each ALGO key matches exactly one STAR key. Shows detailed reason for mismatches."
)

demo.launch()














lets see 

import pandas as pd
import gradio as gr
from collections import defaultdict, Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched = []

    # Build STAR key-to-index mapping (allow duplicates)
    star_key_map = defaultdict(list)
    for idx, key in enumerate(star_keys):
        star_key_map[key].append(idx)

    matched_star_indices = set()
    matched_algo_indices = set()

    for i, algo_key in enumerate(algo_keys):
        matching_star_idxs = star_key_map.get(algo_key, [])
        if len(matching_star_idxs) == 1 and matching_star_idxs[0] not in matched_star_indices:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": star_keys[matching_star_idxs[0]],
                "Status": "Match"
            })
            matched_star_indices.add(matching_star_idxs[0])
            matched_algo_indices.add(i)
        elif len(matching_star_idxs) > 1:
            # Overmatch: multiple STAR keys match one ALGO key
            for idx in matching_star_idxs:
                unmatched.append({
                    "ALGO Key": algo_key,
                    "STAR Key": star_keys[idx],
                    "Status": "Mismatch - Multiple STAR Keys"
                })
            matched_algo_indices.add(i)
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No Match"
            })

    # Now handle STAR keys that were never matched to any ALGO key
    for idx, star_key in enumerate(star_keys):
        if idx not in matched_star_indices:
            match_found = any(algo_key == star_key for algo_key in algo_keys)
            if not match_found or len(star_key_map[star_key]) > 1:
                unmatched.append({
                    "ALGO Key": "<No Match>",
                    "STAR Key": star_key,
                    "Status": "Mismatch - No Match or Duplicate"
                })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched_df)}\n"
        f"Unmatched Records: {len(unmatched_df)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Strict 1:1 with STAR Overmatch Handling",
    description="If multiple STAR keys match the same ALGO key, all are moved to the unmatched table."
)

demo.launch()














Exclusion code 

import pandas as pd
import gradio as gr
from collections import defaultdict

exclusion_rules = []

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def apply_exclusion_rules(df_algo, df_star, rules):
    excluded_rows = []

    df_algo_filtered = df_algo.copy()
    df_star_filtered = df_star.copy()

    for rule in rules:
        file_type = rule['file']
        column = rule['column']
        op = rule['operator']
        value = rule['value']

        if file_type == "ALGO" and column in df_algo_filtered.columns:
            if op == '=':
                match = df_algo_filtered[df_algo_filtered[column] == value]
                excluded_rows.extend(match.to_dict('records'))
                df_algo_filtered = df_algo_filtered[df_algo_filtered[column] != value]
            else:
                match = df_algo_filtered[df_algo_filtered[column] != value]
                excluded_rows.extend(match.to_dict('records'))
                df_algo_filtered = df_algo_filtered[df_algo_filtered[column] == value]

        elif file_type == "STAR" and column in df_star_filtered.columns:
            if op == '=':
                match = df_star_filtered[df_star_filtered[column] == value]
                excluded_rows.extend(match.to_dict('records'))
                df_star_filtered = df_star_filtered[df_star_filtered[column] != value]
            else:
                match = df_star_filtered[df_star_filtered[column] != value]
                excluded_rows.extend(match.to_dict('records'))
                df_star_filtered = df_star_filtered[df_star_filtered[column] == value]

    return df_algo_filtered, df_star_filtered, pd.DataFrame(excluded_rows)

def reconcile_with_rules(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    # Apply exclusion rules
    df_algo_filtered, df_star_filtered, excluded_df = apply_exclusion_rules(df_algo, df_star, exclusion_rules)

    algo_keys = extract_algo_keys(df_algo_filtered)
    star_keys = extract_star_keys(df_star_filtered)

    matched = []
    unmatched = []

    star_key_map = defaultdict(list)
    for idx, key in enumerate(star_keys):
        star_key_map[key].append(idx)

    matched_star_indices = set()
    matched_algo_indices = set()

    for i, algo_key in enumerate(algo_keys):
        matching_star_idxs = star_key_map.get(algo_key, [])
        if len(matching_star_idxs) == 1 and matching_star_idxs[0] not in matched_star_indices:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": star_keys[matching_star_idxs[0]],
                "Status": "Match"
            })
            matched_star_indices.add(matching_star_idxs[0])
            matched_algo_indices.add(i)
        elif len(matching_star_idxs) > 1:
            for idx in matching_star_idxs:
                unmatched.append({
                    "ALGO Key": algo_key,
                    "STAR Key": star_keys[idx],
                    "Status": "Mismatch - Multiple STAR Keys"
                })
            matched_algo_indices.add(i)
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No Match"
            })

    for idx, star_key in enumerate(star_keys):
        if idx not in matched_star_indices:
            match_found = any(algo_key == star_key for algo_key in algo_keys)
            if not match_found or len(star_key_map[star_key]) > 1:
                unmatched.append({
                    "ALGO Key": "<No Match>",
                    "STAR Key": star_key,
                    "Status": "Mismatch - No Match or Duplicate"
                })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched_df)}\n"
        f"Unmatched Records: {len(unmatched_df)}\n"
        f"Excluded Records: {len(excluded_df)}"
    )

    return excluded_df, matched_df, unmatched_df, summary

def add_rule(file, column, operator, value):
    exclusion_rules.append({
        "file": file,
        "column": column,
        "operator": operator,
        "value": value
    })
    return f"Added rule: {file} → {column} {operator} {value}"

def clear_rules():
    exclusion_rules.clear()
    return "All exclusion rules cleared."

with gr.Blocks() as demo:
    gr.Markdown("## Reconciliation App with Exclusion Rules")

    with gr.Row():
        algo_file = gr.File(label="Upload ALGO CSV File")
        star_file = gr.File(label="Upload STAR CSV File")

    with gr.Row():
        file_selector = gr.Dropdown(["ALGO", "STAR"], label="Select File for Exclusion")
        column_selector = gr.Textbox(label="Column Name (type manually)")
        operator_selector = gr.Dropdown(['=', '!='], label="Operator")
        value_input = gr.Textbox(label="Value to Compare")
        rule_output = gr.Textbox(label="Rule Status", interactive=False)

    add_rule_btn = gr.Button("Add Rule")
    clear_rules_btn = gr.Button("Clear All Rules")

    add_rule_btn.click(fn=add_rule, inputs=[file_selector, column_selector, operator_selector, value_input], outputs=rule_output)
    clear_rules_btn.click(fn=clear_rules, outputs=rule_output)

    run_btn = gr.Button("Run Reconciliation")

    excluded_table = gr.Dataframe(label="Excluded Records")
    matched_table = gr.Dataframe(label="Matched Records")
    unmatched_table = gr.Dataframe(label="Unmatched Records")
    summary_output = gr.Textbox(label="Summary")

    run_btn.click(
        fn=reconcile_with_rules,
        inputs=[algo_file, star_file],
        outputs=[excluded_table, matched_table, unmatched_table, summary_output]
    )

demo.launch()
