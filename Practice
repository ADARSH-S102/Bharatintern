import pandas as pd
import gradio as gr
import os

def extract_algo_keys(df):
    if 'Agreement_name' not in df.columns:
        raise ValueError("Missing 'Agreement_name' column in ALGO file.")
    keys = df['Agreement_name'].apply(
        lambda x: x.replace('_RIMR', '3CR').replace('_RIMP', '3CP')
    ).tolist()
    return keys

def extract_star_keys(df):
    required_cols = ['CRDS Party Code', 'Post Direction']
    if not all(col in df.columns for col in required_cols):
        raise ValueError("Missing 'CRDS Party Code' or 'Post Direction' column in STAR file.")
    keys = df.apply(lambda row: str(row['CRDS Party Code']) + '3' + str(row['Post Direction']), axis=1).tolist()
    return keys

def reconcile_csv_files(algo_file, star_file):
    try:
        # Load CSVs
        df_algo = pd.read_csv(algo_file).astype(str)
        df_star = pd.read_csv(star_file).astype(str)

        # Extract match keys
        algo_keys = extract_algo_keys(df_algo)
        star_keys = extract_star_keys(df_star)

        results = []
        max_len = max(len(algo_keys), len(star_keys))

        for i in range(max_len):
            key_algo = algo_keys[i] if i < len(algo_keys) else "<Missing>"
            key_star = star_keys[i] if i < len(star_keys) else "<Missing>"

            if key_algo == key_star:
                results.append(f"Row {i+1}: Match ({key_algo})")
            else:
                results.append(f"Row {i+1}: Mismatch\n  ALGO: {key_algo}\n  STAR: {key_star}\n")

        return "\n".join(results)

    except Exception as e:
        return f"Error: {str(e)}"

# Gradio UI
iface = gr.Interface(
    fn=reconcile_csv_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs="text",
    title="CSV Reconciliation App",
    description="Upload ALGO and STAR CSV files. The tool compares transformed values using a 1:1 custom matching rule."
)

if __name__ == "__main__":
    iface.launch()
