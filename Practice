from lxml import etree
import pandas as pd
import pyodbc
import yaml
import glob
import os

# Load config
with open("config.yaml", "r") as f:
    config = yaml.safe_load(f)

# DB details
db_config = config["database"]

# XML details
xml_folder_path = config["xml"]["file_path"]  # now treated as folder path
xpath_expr = config["xml"]["xpath_expr"]
namespaces = config.get("namespaces", {})

# Common fields
common_fields_config = config.get("common_fields", {})


def save_to_db(df, table_name):
    try:
        conn = pyodbc.connect(
            driver=db_config['driver'],
            server=db_config['server'],
            database=db_config['database'],
            trusted_connection='yes' if db_config.get('trusted_connection', True) else 'no'
        )
        cursor = conn.cursor()

        cursor.execute("""
            SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = ?
        """, (table_name,))
        table_exists = cursor.fetchone()[0] == 1

        if not table_exists:
            columns = [f"[{col}] NVARCHAR(MAX)" for col in df.columns]
            create_table_sql = f"CREATE TABLE [{table_name}] ({', '.join(columns)})"
            cursor.execute(create_table_sql)
            print(f"[INFO] Created table [{table_name}]")
        else:
            cursor.execute("""
                SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ?
            """, (table_name,))
            existing_columns = set(row[0] for row in cursor.fetchall())
            missing_columns = [col for col in df.columns if col not in existing_columns]

            for col in missing_columns:
                alter_sql = f"ALTER TABLE [{table_name}] ADD [{col}] NVARCHAR(MAX)"
                cursor.execute(alter_sql)
                print(f"[INFO] Added missing column: {col}")

        for _, row in df.iterrows():
            placeholders = ", ".join(["?"] * len(row))
            column_names = ", ".join(f"[{col}]" for col in row.index)
            insert_sql = f"INSERT INTO [{table_name}] ({column_names}) VALUES ({placeholders})"
            values = tuple(None if pd.isna(row[col]) else str(row[col]) for col in df.columns)
            cursor.execute(insert_sql, values)

        conn.commit()
        print(f"[INFO] Inserted {len(df)} rows into [{table_name}]")

    except Exception as e:
        print(f"[ERROR] Database error: {str(e)}")
    finally:
        if 'conn' in locals():
            conn.close()


def extract_data_with_common_fields(xml_file, xpath_expr):
    try:
        with open(xml_file, "rb") as f:
            content = f.read()

        start = content.find(b"<?xml")
        cleaned_content = content[start:] if start != -1 else content
        tree = etree.fromstring(cleaned_content)

        elements = tree.xpath(xpath_expr, namespaces=namespaces)
        if not elements:
            print(f"[WARNING] No matching elements found in: {xml_file}")
            return None

        data = []
        for elem in elements:
            row = {}
            for child in elem.iter():
                tag = child.tag.split('}')[-1]
                if child.text and child.text.strip():
                    row[tag] = child.text.strip()
            data.append(row)

        df = pd.DataFrame(data)

        # Extract and append common fields
        common_fields = {
            key: (
                tree.find(xpath, namespaces=namespaces).text.strip()
                if tree.find(xpath, namespaces=namespaces) is not None and
                   tree.find(xpath, namespaces=namespaces).text else "NULL"
            )
            for key, xpath in common_fields_config.items()
        }

        for key, value in common_fields.items():
            df[key] = value

        return df

    except Exception as e:
        print(f"[ERROR] Failed to process file {xml_file}: {e}")
        return None


# Main
if __name__ == "__main__":
    xml_files = glob.glob(os.path.join(xml_folder_path, "*.xml"))
    if not xml_files:
        print(f"[INFO] No XML files found in: {xml_folder_path}")
    else:
        print(f"[INFO] Found {len(xml_files)} XML files in: {xml_folder_path}")

    # Use XPath expression to name the table
    table_name = xpath_expr.strip("/").split("/")[-1].replace(":", "_")

    for xml_file in xml_files:
        print(f"\n[INFO] Processing: {xml_file}")
        df = extract_data_with_common_fields(xml_file, xpath_expr)
        if df is not None and not df.empty:
            save_to_db(df, table_name)
            print(df.head())
        else:
            print(f"[INFO] No data extracted from: {xml_file}")
              
