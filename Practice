Here is the complete Spring Boot code set with the logic you described, including:

Fetching ALGO and STAR data from database tables

Post Direction transformation

Exclusion rule handling (saved to a DB table)

Matching logic with unmatched classification

Getters and setters included



---

1. pom.xml

<project xmlns="http://maven.apache.org/POM/4.0.0" ...>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>reconciliation-app</artifactId>
    <version>1.0.0</version>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>19.3.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
    </dependencies>
</project>


---

2. application.properties

spring.datasource.url=jdbc:oracle:thin:@//localhost:1521/358fr305
spring.datasource.username=RAIDBA
spring.datasource.password=1#Socrates*UATDb Refresh#0
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true


---

3. AlgoEntity.java

@Entity
@Table(name = "INITIAL_MARGIN_EODNEW_DATA")
public class AlgoEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "Agreement_name")
    private String agreementName;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getAgreementName() { return agreementName; }
    public void setAgreementName(String agreementName) { this.agreementName = agreementName; }
}


---

4. StarEntity.java

@Entity
@Table(name = "STARALGONEW_DATA")
public class StarEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "CRDS Party Code")
    private String crdsPartyCode;

    @Column(name = "Post Direction")
    private String postDirection;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getCrdsPartyCode() { return crdsPartyCode; }
    public void setCrdsPartyCode(String crdsPartyCode) { this.crdsPartyCode = crdsPartyCode; }

    public String getPostDirection() { return postDirection; }
    public void setPostDirection(String postDirection) { this.postDirection = postDirection; }
}


---

5. MatchedRecord.java

@Entity
public class MatchedRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String algoKey;
    private String starKey;
    private String status;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getAlgoKey() { return algoKey; }
    public void setAlgoKey(String algoKey) { this.algoKey = algoKey; }

    public String getStarKey() { return starKey; }
    public void setStarKey(String starKey) { this.starKey = starKey; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}


---

6. ExcludedRecord.java

@Entity
public class ExcludedRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String algoKey;
    private String starKey;
    private String reason;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getAlgoKey() { return algoKey; }
    public void setAlgoKey(String algoKey) { this.algoKey = algoKey; }

    public String getStarKey() { return starKey; }
    public void setStarKey(String starKey) { this.starKey = starKey; }

    public String getReason() { return reason; }
    public void setReason(String reason) { this.reason = reason; }
}


---

7. AlgoRepository.java, StarRepository.java, etc.

@Repository
public interface AlgoRepository extends JpaRepository<AlgoEntity, Long> {}

@Repository
public interface StarRepository extends JpaRepository<StarEntity, Long> {}

@Repository
public interface MatchedRecordRepository extends JpaRepository<MatchedRecord, Long> {}

@Repository
public interface ExcludedRecordRepository extends JpaRepository<ExcludedRecord, Long> {}


---

8. ReconciliationService.java

@Service
public class ReconciliationService {

    @Autowired
    private AlgoRepository algoRepo;

    @Autowired
    private StarRepository starRepo;

    @Autowired
    private MatchedRecordRepository matchedRepo;

    @Autowired
    private ExcludedRecordRepository excludedRepo;

    public void reconcile() {
        List<AlgoEntity> algoList = algoRepo.findAll();
        List<StarEntity> starList = starRepo.findAll();

        Map<String, List<Integer>> starKeyMap = new HashMap<>();
        List<String> algoKeys = new ArrayList<>();
        List<String> starKeys = new ArrayList<>();

        for (int i = 0; i < starList.size(); i++) {
            StarEntity star = starList.get(i);
            String key = star.getCrdsPartyCode().trim().replaceAll(" ", "") +
                         "3" +
                         star.getPostDirection().trim().replaceAll(" ", "");
            starKeys.add(key);
            starKeyMap.computeIfAbsent(key, k -> new ArrayList<>()).add(i);
        }

        for (AlgoEntity algo : algoList) {
            String key = algo.getAgreementName()
                             .replace("_RIMR", "3CR")
                             .replace("_RIMP", "3CP")
                             .replaceAll(" ", "")
                             .trim();
            algoKeys.add(key);
        }

        Set<Integer> matchedStarIdx = new HashSet<>();
        for (int i = 0; i < algoKeys.size(); i++) {
            String algoKey = algoKeys.get(i);
            List<Integer> starIdxs = starKeyMap.getOrDefault(algoKey, new ArrayList<>());

            if (starIdxs.size() == 1 && !matchedStarIdx.contains(starIdxs.get(0))) {
                MatchedRecord match = new MatchedRecord();
                match.setAlgoKey(algoKey);
                match.setStarKey(starKeys.get(starIdxs.get(0)));
                match.setStatus("Match");
                matchedRepo.save(match);
                matchedStarIdx.add(starIdxs.get(0));
            } else if (starIdxs.size() > 1) {
                for (int idx : starIdxs) {
                    ExcludedRecord excl = new ExcludedRecord();
                    excl.setAlgoKey(algoKey);
                    excl.setStarKey(starKeys.get(idx));
                    excl.setReason("Multiple STAR Match");
                    excludedRepo.save(excl);
                }
            } else {
                MatchedRecord unmatched = new MatchedRecord();
                unmatched.setAlgoKey(algoKey);
                unmatched.setStarKey("<No Match>");
                unmatched.setStatus("Mismatch - No STAR Match");
                matchedRepo.save(unmatched);
            }
        }
    }
}


---

9. ReconciliationApp.java

@SpringBootApplication
public class ReconciliationApp implements CommandLineRunner {

    @Autowired
    private ReconciliationService reconciliationService;

    public static void main(String[] args) {
        SpringApplication.run(ReconciliationApp.class, args);
    }

    @Override
    public void run(String... args) {
        reconciliationService.reconcile();
    }
}

Would you like this entire structure in a downloadable zip format too?
                        
