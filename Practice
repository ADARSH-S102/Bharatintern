  <div class="add-item">
  <h2>Add an Item</h2>

  <!-- Display success message when item is added using reactive stream -->
  <div *ngIf="itemAdded$ | async" class="alert alert-success">
    Item successfully added!
  </div>

  <form [formGroup]="itemForm" (ngSubmit)="addItem()">
    <div class="form-group">
      <label for="itemName">Item Name:</label>
      <input id="itemName" formControlName="itemName" class="form-control" />
      <!-- Display validation error messages -->
      <div *ngIf="itemForm.controls['itemName'].invalid && itemForm.controls['itemName'].touched" class="text-danger">
        <small *ngIf="itemForm.controls['itemName'].hasError('required')">Item name is required.</small>
        <small *ngIf="itemForm.controls['itemName'].hasError('minlength')">Item name must be at least 3 characters long.</small>
      </div>
    </div>

    <button type="submit" [disabled]="itemForm.invalid" class="btn btn-primary">Add Item</button>
  </form>

  <!-- Display the list of items dynamically without ngFor -->
  <div *ngIf="items$ | async as items">
    <h3>Item List</h3>
    <div *ngIf="items.length === 0">
      <p>No items added yet.</p>
    </div>
    <div *ngIf="items.length > 0">
      <div *ngFor="let item of items; let i = index">{{ i + 1 }}. {{ item }}</div>
    </div>
  </div>
</div>










.add-item {
  max-width: 500px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.alert {
  margin-bottom: 20px;
}

button {
  margin-top: 10px;
}









import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { BehaviorSubject } from 'rxjs'; // For reactive updates

@Component({
  selector: 'app-add-item',
  templateUrl: './add-item.component.html',
  styleUrls: ['./add-item.component.css']
})
export class AddItemComponent implements OnInit {
  itemForm: FormGroup;
  items$ = new BehaviorSubject<string[]>([]);  // Reactive stream of items
  itemAdded$ = new BehaviorSubject<boolean>(false);  // Reactive stream for item added flag

  constructor(private fb: FormBuilder) {
    // Initialize form group with validation
    this.itemForm = this.fb.group({
      itemName: ['', [Validators.required, Validators.minLength(3)]]
    });
  }

  ngOnInit(): void {}

  // Method to add item to the list
  addItem() {
    if (this.itemForm.valid) {
      const newItem = this.itemForm.value.itemName;
      const updatedItems = [...this.items$.getValue(), newItem];  // Add item to current list
      this.items$.next(updatedItems);  // Update the items stream

      this.itemForm.reset();  // Reset the form after adding item
      this.itemAdded$.next(true);  // Update the item added flag

      // Hide success message after 2 seconds
      setTimeout(() => this.itemAdded$.next(false), 2000);
    }
  }
}
