
namespaces:
  ns1: "http://example.com/ns1"
  ns2: "http://example.com/ns2"

database:
  server: "your_server_name"
  database: "your_database_name"

tables:
  - name: "Table1"
    xpath: "//ns1:Record"  # Adjust this XPath to match your XML structure
    common_fields:
      Field1: "//ns1:CommonField1"  # Adjust these paths as needed
      Field2: "//ns1:CommonField2"

  - name: "Table2"
    xpath: "//ns2:Entry"  # Adjust this XPath to match your XML structure
    common_fields:
      FieldA: "//ns2:CommonFieldA"  # Adjust these paths as needed
      FieldB: "//ns2:CommonFieldB"

  - name: "Table3"
    xpath: "//ns1:Item"  # Adjust this XPath to match your XML structure
    common_fields:
      FieldX: "//ns1:CommonFieldX"  # Adjust these paths as needed
      FieldY: "//ns1:CommonFieldY"












  def main():
    config = load_config()
    ns = config['namespaces']
    db_config = config['database']

    # Get the single XML file path from config
    xml_file_path = config.get('file_path')
    if not os.path.isfile(xml_file_path) or not xml_file_path.lower().endswith('.xml'):
        print("[ERROR] Invalid XML file path provided in config.")
        return

    # Extract filename without extension for table naming
    filename_base = os.path.splitext(os.path.basename(xml_file_path))[0]

    print(f"\n[INFO] Processing file: {xml_file_path}")
    tree = clean_and_parse(xml_file_path)

    for table_cfg in config['tables']:
        xpath_expr = table_cfg['xpath']
        common_paths = table_cfg['common_fields']

        # Determine table name suffix based on XPath (ntry or bal)
        if 'ntry' in xpath_expr.lower():
            suffix = '_ntry'
        elif 'bal' in xpath_expr.lower():
            suffix = '_bal'
        else:
            suffix = '_data'  # fallback if needed

        table_name = f"{filename_base}{suffix}"

        # Extract and process data
        common_values = extract_common_fields(tree, common_paths, ns)
        df = extract_data(tree, xpath_expr, ns, common_values)
        if df is not None:
            save_to_db(df, table_name, db_config)
  
