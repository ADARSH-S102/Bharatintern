import pandas as pd
import gradio as gr
import xml.etree.ElementTree as ET
import os

def read_file(file):
    filename = file.name
    ext = os.path.splitext(filename)[-1].lower()

    if ext in ['.csv', '.txt']:
        try:
            return pd.read_csv(file).astype(str).values.tolist()
        except:
            return file.read().decode('utf-8').splitlines()
    elif ext in ['.xls', '.xlsx']:
        return pd.read_excel(file).astype(str).values.tolist()
    elif ext == '.xml':
        tree = ET.parse(file)
        root = tree.getroot()
        # Convert each immediate child to string line
        return [ET.tostring(child, encoding='unicode').strip() for child in root]
    else:
        raise ValueError("Unsupported file format.")

def compare_files(file1, file2):
    try:
        data1 = read_file(file1)
        data2 = read_file(file2)

        max_len = max(len(data1), len(data2))
        results = []

        for i in range(max_len):
            row1 = data1[i] if i < len(data1) else "<Missing>"
            row2 = data2[i] if i < len(data2) else "<Missing>"

            if row1 == row2:
                results.append(f"Row {i+1}: Match")
            else:
                results.append(f"Row {i+1}: Mismatch\n  File1: {row1}\n  File2: {row2}\n")
        
        return "\n".join(results)
    
    except Exception as e:
        return f"Error: {str(e)}"

# Gradio Interface
iface = gr.Interface(
    fn=compare_files,
    inputs=[
        gr.File(label="Upload File 1"),
        gr.File(label="Upload File 2")
    ],
    outputs="text",
    title="Reconciliation Tool - Full File Comparison",
    description="Compares two files row-by-row (CSV, TXT, Excel, XML supported). No key column needed."
)

if __name__ == "__main__":
    iface.launch()
