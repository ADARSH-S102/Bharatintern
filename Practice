import pandas as pd
import gradio as gr

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    result = []

    for i, algo_key in enumerate(algo_keys):
        status = "Match" if algo_key in star_keys else "Mismatch"
        matched_star = algo_key if status == "Match" else "<Not Found>"

        result.append({
            "Row": i + 1,
            "ALGO Key": algo_key,
            "Matching STAR Key": matched_star,
            "Status": status
        })

    return pd.DataFrame(result)

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=gr.Dataframe(label="Comparison Result"),
    title="Reconciliation App - Flexible Matching",
    description="Each ALGO key is matched against all STAR keys (not index-wise)."
)

demo.launch()









improved -shows match

import pandas as pd
import gradio as gr

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched_algo = []
    unmatched_star = star_keys.copy()

    for algo_key in algo_keys:
        if algo_key in star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            unmatched_star.remove(algo_key)
        else:
            unmatched_algo.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Not Found>",
                "Status": "Mismatch"
            })

    for star_key in unmatched_star:
        unmatched_algo.append({
            "ALGO Key": "<Not Found>",
            "STAR Key": star_key,
            "Status": "Mismatch"
        })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched_algo)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched_algo)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Match vs Mismatch",
    description="Compares ALGO and STAR files by key, showing matched/unmatched rows and summary."
)

demo.launch()













the perfect code 

import pandas as pd
import gradio as gr
from collections import Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    star_counter = Counter(star_keys)
    used_star_keys = set()

    matched = []
    unmatched = []

    for algo_key in algo_keys:
        if star_counter[algo_key] == 1 and algo_key not in used_star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            used_star_keys.add(algo_key)
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Not Found or Duplicate>",
                "Status": "Mismatch"
            })

    # Add remaining unmatched STAR keys
    for star_key in star_keys:
        if star_key not in used_star_keys and star_keys.count(star_key) == 1:
            unmatched.append({
                "ALGO Key": "<Not Found>",
                "STAR Key": star_key,
                "Status": "Mismatch"
            })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Strict 1:1 Matching",
    description="Only one ALGO key can match exactly one STAR key. Duplicates lead to mismatch."
)

demo.launch()










perfection defined 


import pandas as pd
import gradio as gr
from collections import Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    star_counter = Counter(star_keys)
    used_star_keys = set()

    matched = []
    unmatched = []

    for algo_key in algo_keys:
        count = star_counter[algo_key]
        if count == 1 and algo_key not in used_star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            used_star_keys.add(algo_key)
        elif count > 1:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Duplicate in STAR>",
                "Status": "Mismatch - Duplicate"
            })
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No Match"
            })

    # Remaining unmatched STAR keys
    for star_key in star_keys:
        if star_key not in used_star_keys and star_counter[star_key] == 1:
            unmatched.append({
                "ALGO Key": "<No Match>",
                "STAR Key": star_key,
                "Status": "Mismatch - No Match"
            })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Detailed 1:1 Matching",
    description="Each ALGO key matches exactly one STAR key. Shows detailed reason for mismatches."
)

demo.launch()














lets see 


import pandas as pd
import gradio as gr
from collections import Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched = []

    star_key_usage = Counter()
    algo_key_usage = Counter()

    # Count all STAR keys
    star_counter = Counter(star_keys)

    # Match exactly one-to-one, one ALGO key must match exactly one STAR key (no duplicates)
    for i, algo_key in enumerate(algo_keys):
        match_indices = [j for j, sk in enumerate(star_keys) if sk == algo_key and star_key_usage[sk] == 0]
        if len(match_indices) == 1:
            j = match_indices[0]
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": star_keys[j],
                "Status": "Match"
            })
            star_key_usage[star_keys[j]] += 1
            algo_key_usage[algo_key] += 1
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Duplicate or Not Found>",
                "Status": "Mismatch - No 1:1 Match"
            })
            algo_key_usage[algo_key] += 1

    # Now check every STAR key — if it wasn't used in a match, it’s unmatched
    for i, star_key in enumerate(star_keys):
        if star_key_usage[star_key] == 0:
            unmatched.append({
                "ALGO Key": "<No Match>",
                "STAR Key": star_key,
                "Status": "Mismatch - Not Matched"
            })
            star_key_usage[star_key] += 1  # mark as processed to avoid counting again

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched_df)}\n"
        f"Unmatched Records: {len(unmatched_df)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Full Unmatched Record Reporting",
    description="Each unmatched ALGO/STAR key appears in the output, even repeated ones."
)

demo.launch()
