import pandas as pd
import gradio as gr

def extract_algo_keys(df):
    if 'Agreement_name' not in df.columns:
        raise ValueError("Missing 'Agreement_name' column in ALGO file.")
    return df['Agreement_name'].apply(
        lambda x: x.replace('_RIMR', '3CR').replace('_RIMP', '3CP')
    ).tolist()

def extract_star_keys(df):
    required_cols = ['CRDS Party Code', 'Post Direction']
    if not all(col in df.columns for col in required_cols):
        raise ValueError("Missing 'CRDS Party Code' or 'Post Direction' column in STAR file.")
    return df.apply(lambda row: str(row['CRDS Party Code']) + '3' + str(row['Post Direction']), axis=1).tolist()

def reconcile_csv_files(algo_file, star_file):
    try:
        df_algo = pd.read_csv(algo_file).astype(str)
        df_star = pd.read_csv(star_file).astype(str)

        algo_keys = extract_algo_keys(df_algo)
        star_keys = extract_star_keys(df_star)

        max_len = max(len(algo_keys), len(star_keys))

        result_rows = []
        for i in range(max_len):
            algo_key = algo_keys[i] if i < len(algo_keys) else "<Missing>"
            star_key = star_keys[i] if i < len(star_keys) else "<Missing>"
            status = "Match" if algo_key == star_key else "Mismatch"
            result_rows.append({
                "Row": i + 1,
                "ALGO Key": algo_key,
                "STAR Key": star_key,
                "Status": status
            })

        return pd.DataFrame(result_rows)

    except Exception as e:
        return f"Error: {str(e)}"

# Gradio Interface
iface = gr.Interface(
    fn=reconcile_csv_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=gr.Dataframe(label="Reconciliation Result"),
    title="CSV Reconciliation App",
    description="Uploads ALGO and STAR CSVs and matches based on a custom rule. Results shown in table format."
)

if __name__ == "__main__":
    iface.launch()












POM.XML 

<project xmlns="http://maven.apache.org/POM/4.0.0" ...>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>reconciliation-app</artifactId>
    <version>1.0.0</version>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>1.10.0</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>




ReconciliationController.java

package com.example.reconciliation;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.util.*;

@RestController
@RequestMapping("/reconcile")
public class ReconciliationController {

    @PostMapping("/csv")
    public List<Map<String, String>> reconcileFiles(
            @RequestParam("algoFile") MultipartFile algoFile,
            @RequestParam("starFile") MultipartFile starFile) throws IOException {

        List<String> algoKeys = extractAlgoKeys(algoFile);
        List<String> starKeys = extractStarKeys(starFile);

        int maxLen = Math.max(algoKeys.size(), starKeys.size());
        List<Map<String, String>> result = new ArrayList<>();

        for (int i = 0; i < maxLen; i++) {
            String key1 = i < algoKeys.size() ? algoKeys.get(i) : "<Missing>";
            String key2 = i < starKeys.size() ? starKeys.get(i) : "<Missing>";
            String status = key1.equals(key2) ? "Match" : "Mismatch";

            Map<String, String> row = new HashMap<>();
            row.put("Row", String.valueOf(i + 1));
            row.put("ALGO Key", key1);
            row.put("STAR Key", key2);
            row.put("Status", status);

            result.add(row);
        }

        return result;
    }

    private List<String> extractAlgoKeys(MultipartFile file) throws IOException {
        Reader reader = new InputStreamReader(file.getInputStream());
        CSVParser parser = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(reader);

        List<String> keys = new ArrayList<>();
        for (CSVRecord record : parser) {
            String val = record.get("Agreement_name");
            val = val.replace("_RIMR", "3CR").replace("_RIMP", "3CP");
            keys.add(val);
        }
        return keys;
    }

    private List<String> extractStarKeys(MultipartFile file) throws IOException {
        Reader reader = new InputStreamReader(file.getInputStream());
        CSVParser parser = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(reader);

        List<String> keys = new ArrayList<>();
        for (CSVRecord record : parser) {
            String part1 = record.get("CRDS Party Code");
            String part2 = record.get("Post Direction");
            keys.add(part1 + "3" + part2);
        }
        return keys;
    }
}






ReconciliationApp.java

package com.example.reconciliation;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ReconciliationApp {
    public static void main(String[] args) {
        SpringApplication.run(ReconciliationApp.class, args);
    }
}
