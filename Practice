import pandas as pd
import gradio as gr

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    result = []

    for i, algo_key in enumerate(algo_keys):
        status = "Match" if algo_key in star_keys else "Mismatch"
        matched_star = algo_key if status == "Match" else "<Not Found>"

        result.append({
            "Row": i + 1,
            "ALGO Key": algo_key,
            "Matching STAR Key": matched_star,
            "Status": status
        })

    return pd.DataFrame(result)

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=gr.Dataframe(label="Comparison Result"),
    title="Reconciliation App - Flexible Matching",
    description="Each ALGO key is matched against all STAR keys (not index-wise)."
)

demo.launch()









improved -shows match

import pandas as pd
import gradio as gr

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched_algo = []
    unmatched_star = star_keys.copy()

    for algo_key in algo_keys:
        if algo_key in star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            unmatched_star.remove(algo_key)
        else:
            unmatched_algo.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Not Found>",
                "Status": "Mismatch"
            })

    for star_key in unmatched_star:
        unmatched_algo.append({
            "ALGO Key": "<Not Found>",
            "STAR Key": star_key,
            "Status": "Mismatch"
        })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched_algo)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched_algo)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Match vs Mismatch",
    description="Compares ALGO and STAR files by key, showing matched/unmatched rows and summary."
)

demo.launch()













the perfect code 

import pandas as pd
import gradio as gr
from collections import Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    star_counter = Counter(star_keys)
    used_star_keys = set()

    matched = []
    unmatched = []

    for algo_key in algo_keys:
        if star_counter[algo_key] == 1 and algo_key not in used_star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            used_star_keys.add(algo_key)
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Not Found or Duplicate>",
                "Status": "Mismatch"
            })

    # Add remaining unmatched STAR keys
    for star_key in star_keys:
        if star_key not in used_star_keys and star_keys.count(star_key) == 1:
            unmatched.append({
                "ALGO Key": "<Not Found>",
                "STAR Key": star_key,
                "Status": "Mismatch"
            })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Strict 1:1 Matching",
    description="Only one ALGO key can match exactly one STAR key. Duplicates lead to mismatch."
)

demo.launch()










perfection defined 


import pandas as pd
import gradio as gr
from collections import Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    star_counter = Counter(star_keys)
    used_star_keys = set()

    matched = []
    unmatched = []

    for algo_key in algo_keys:
        count = star_counter[algo_key]
        if count == 1 and algo_key not in used_star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            used_star_keys.add(algo_key)
        elif count > 1:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Duplicate in STAR>",
                "Status": "Mismatch - Duplicate"
            })
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No Match"
            })

    # Remaining unmatched STAR keys
    for star_key in star_keys:
        if star_key not in used_star_keys and star_counter[star_key] == 1:
            unmatched.append({
                "ALGO Key": "<No Match>",
                "STAR Key": star_key,
                "Status": "Mismatch - No Match"
            })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Detailed 1:1 Matching",
    description="Each ALGO key matches exactly one STAR key. Shows detailed reason for mismatches."
)

demo.launch()














lets see 

import pandas as pd
import gradio as gr
from collections import defaultdict, Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched = []

    # Build STAR key-to-index mapping (allow duplicates)
    star_key_map = defaultdict(list)
    for idx, key in enumerate(star_keys):
        star_key_map[key].append(idx)

    matched_star_indices = set()
    matched_algo_indices = set()

    for i, algo_key in enumerate(algo_keys):
        matching_star_idxs = star_key_map.get(algo_key, [])
        if len(matching_star_idxs) == 1 and matching_star_idxs[0] not in matched_star_indices:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": star_keys[matching_star_idxs[0]],
                "Status": "Match"
            })
            matched_star_indices.add(matching_star_idxs[0])
            matched_algo_indices.add(i)
        elif len(matching_star_idxs) > 1:
            # Overmatch: multiple STAR keys match one ALGO key
            for idx in matching_star_idxs:
                unmatched.append({
                    "ALGO Key": algo_key,
                    "STAR Key": star_keys[idx],
                    "Status": "Mismatch - Multiple STAR Keys"
                })
            matched_algo_indices.add(i)
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No Match"
            })

    # Now handle STAR keys that were never matched to any ALGO key
    for idx, star_key in enumerate(star_keys):
        if idx not in matched_star_indices:
            match_found = any(algo_key == star_key for algo_key in algo_keys)
            if not match_found or len(star_key_map[star_key]) > 1:
                unmatched.append({
                    "ALGO Key": "<No Match>",
                    "STAR Key": star_key,
                    "Status": "Mismatch - No Match or Duplicate"
                })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched_df)}\n"
        f"Unmatched Records: {len(unmatched_df)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Strict 1:1 with STAR Overmatch Handling",
    description="If multiple STAR keys match the same ALGO key, all are moved to the unmatched table."
)

demo.launch()














Exclusion code 

import pandas as pd
import gradio as gr
from collections import defaultdict

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_with_rule(algo_file, star_file, file_type, column, operator, value):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    excluded_rows = []

    # Apply rule to selected file
    if file_type == "ALGO":
        if operator == "=":
            excluded = df_algo[df_algo[column] == value]
            df_algo = df_algo[df_algo[column] != value]
        else:
            excluded = df_algo[df_algo[column] != value]
            df_algo = df_algo[df_algo[column] == value]
    elif file_type == "STAR":
        if operator == "=":
            excluded = df_star[df_star[column] == value]
            df_star = df_star[df_star[column] != value]
        else:
            excluded = df_star[df_star[column] != value]
            df_star = df_star[df_star[column] == value]
    else:
        excluded = pd.DataFrame()

    excluded_rows.extend(excluded.to_dict('records'))
    excluded_df = pd.DataFrame(excluded_rows)

    # Reconciliation
    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched = []

    star_key_map = defaultdict(list)
    for idx, key in enumerate(star_keys):
        star_key_map[key].append(idx)

    matched_star_indices = set()
    matched_algo_indices = set()

    for i, algo_key in enumerate(algo_keys):
        matching_star_idxs = star_key_map.get(algo_key, [])
        if len(matching_star_idxs) == 1 and matching_star_idxs[0] not in matched_star_indices:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": star_keys[matching_star_idxs[0]],
                "Status": "Match"
            })
            matched_star_indices.add(matching_star_idxs[0])
            matched_algo_indices.add(i)
        elif len(matching_star_idxs) > 1:
            for idx in matching_star_idxs:
                unmatched.append({
                    "ALGO Key": algo_key,
                    "STAR Key": star_keys[idx],
                    "Status": "Mismatch - Multiple STAR Keys"
                })
            matched_algo_indices.add(i)
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No Match"
            })

    for idx, star_key in enumerate(star_keys):
        if idx not in matched_star_indices:
            match_found = any(algo_key == star_key for algo_key in algo_keys)
            if not match_found or len(star_key_map[star_key]) > 1:
                unmatched.append({
                    "ALGO Key": "<No Match>",
                    "STAR Key": star_key,
                    "Status": "Mismatch - No Match or Duplicate"
                })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched_df)}\n"
        f"Unmatched Records: {len(unmatched_df)}\n"
        f"Excluded Records: {len(excluded_df)}"
    )

    return excluded_df, matched_df, unmatched_df, summary

# Gradio Interface
with gr.Blocks() as demo:
    gr.Markdown("## Reconciliation App with Single Exclusion Rule")

    with gr.Row():
        algo_file = gr.File(label="Upload ALGO CSV File")
        star_file = gr.File(label="Upload STAR CSV File")

    gr.Markdown("### Exclusion Rule (only one at a time)")
    with gr.Row():
        file_selector = gr.Dropdown(["ALGO", "STAR"], label="Select File")
        column_input = gr.Textbox(label="Column Name")
        operator_input = gr.Dropdown(['=', '!='], label="Operator")
        value_input = gr.Textbox(label="Value")

    run_btn = gr.Button("Run Reconciliation")

    excluded_table = gr.Dataframe(label="Excluded Records")
    matched_table = gr.Dataframe(label="Matched Records")
    unmatched_table = gr.Dataframe(label="Unmatched Records")
    summary_output = gr.Textbox(label="Summary")

    run_btn.click(
        fn=reconcile_with_rule,
        inputs=[algo_file, star_file, file_selector, column_input, operator_input, value_input],
        outputs=[excluded_table, matched_table, unmatched_table, summary_output]
    )

demo.launch()    







.

naya naya 

import pandas as pd
import gradio as gr
from collections import defaultdict

# Helper functions
def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

# File loading
def load_algo_file(file):
    if file is None:
        return pd.DataFrame(), gr.update(choices=[])
    df = pd.read_csv(file).astype(str)
    return df, gr.update(choices=list(df.columns))

def load_star_file(file):
    if file is None:
        return pd.DataFrame(), gr.update(choices=[])
    df = pd.read_csv(file).astype(str)
    return df, gr.update(choices=list(df.columns))

# Dropdown updater
def update_column_dropdown(file_type, algo_df, star_df):
    if file_type == "ALGO":
        return gr.update(choices=list(algo_df.columns))
    elif file_type == "STAR":
        return gr.update(choices=list(star_df.columns))
    return gr.update(choices=[])

# Reconciliation logic with exclusion
def reconcile_with_rule(algo_df, star_df, file_type, column, operator, value):
    df_algo = algo_df.copy()
    df_star = star_df.copy()
    excluded_df = pd.DataFrame()

    if file_type == "ALGO" and column in df_algo.columns:
        if operator == "=":
            excluded_df = df_algo[df_algo[column] == value]
            df_algo = df_algo[df_algo[column] != value]
        else:
            excluded_df = df_algo[df_algo[column] != value]
            df_algo = df_algo[df_algo[column] == value]
    elif file_type == "STAR" and column in df_star.columns:
        if operator == "=":
            excluded_df = df_star[df_star[column] == value]
            df_star = df_star[df_star[column] != value]
        else:
            excluded_df = df_star[df_star[column] != value]
            df_star = df_star[df_star[column] == value]

    # Matching logic
    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched = []

    star_key_map = defaultdict(list)
    for idx, key in enumerate(star_keys):
        star_key_map[key].append(idx)

    matched_star_indices = set()
    matched_algo_indices = set()

    for i, algo_key in enumerate(algo_keys):
        matching_star_idxs = star_key_map.get(algo_key, [])
        if len(matching_star_idxs) == 1 and matching_star_idxs[0] not in matched_star_indices:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": star_keys[matching_star_idxs[0]],
                "Status": "Match"
            })
            matched_star_indices.add(matching_star_idxs[0])
            matched_algo_indices.add(i)
        elif len(matching_star_idxs) > 1:
            for idx in matching_star_idxs:
                unmatched.append({
                    "ALGO Key": algo_key,
                    "STAR Key": star_keys[idx],
                    "Status": "Mismatch - Multiple STAR Keys"
                })
            matched_algo_indices.add(i)
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No Match"
            })

    for idx, star_key in enumerate(star_keys):
        if idx not in matched_star_indices:
            match_found = any(algo_key == star_key for algo_key in algo_keys)
            if not match_found or len(star_key_map[star_key]) > 1:
                unmatched.append({
                    "ALGO Key": "<No Match>",
                    "STAR Key": star_key,
                    "Status": "Mismatch - No Match or Duplicate"
                })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched_df)}\n"
        f"Unmatched Records: {len(unmatched_df)}\n"
        f"Excluded Records: {len(excluded_df)}"
    )

    return excluded_df, matched_df, unmatched_df, summary

# Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("## Reconciliation App with Single Exclusion Rule")

    algo_df_state = gr.State(pd.DataFrame())
    star_df_state = gr.State(pd.DataFrame())

    with gr.Row():
        algo_file = gr.File(label="Upload ALGO CSV")
        star_file = gr.File(label="Upload STAR CSV")

    with gr.Row():
        file_selector = gr.Dropdown(["ALGO", "STAR"], label="Select File for Rule")
        column_selector = gr.Dropdown(label="Column Name")
        operator_input = gr.Dropdown(["=", "!="], label="Operator")
        value_input = gr.Textbox(label="Value")

    run_btn = gr.Button("Run Reconciliation")

    excluded_out = gr.Dataframe(label="Excluded Records")
    matched_out = gr.Dataframe(label="Matched Records")
    unmatched_out = gr.Dataframe(label="Unmatched Records")
    summary_out = gr.Textbox(label="Summary")

    algo_file.change(fn=load_algo_file, inputs=algo_file, outputs=[algo_df_state, column_selector])
    star_file.change(fn=load_star_file, inputs=star_file, outputs=[star_df_state, column_selector])

    file_selector.change(update_column_dropdown, 
                         inputs=[file_selector, algo_df_state, star_df_state],
                         outputs=column_selector)

    run_btn.click(
        reconcile_with_rule,
        inputs=[algo_df_state, star_df_state, file_selector, column_selector, operator_input, value_input],
        outputs=[excluded_out, matched_out, unmatched_out, summary_out]
    )

demo.launch()






........


import pandas as pd
import gradio as gr
from collections import defaultdict

# Helper functions
def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

# File loading
def load_algo_file(file):
    if file is None:
        return pd.DataFrame(), gr.update(choices=[])
    df = pd.read_csv(file).astype(str)
    return df, gr.update(choices=list(df.columns))

def load_star_file(file):
    if file is None:
        return pd.DataFrame(), gr.update(choices=[])
    df = pd.read_csv(file).astype(str)
    return df, gr.update(choices=list(df.columns))

# Dropdown updater
def update_column_dropdown(file_type, algo_df, star_df):
    if file_type == "ALGO":
        return gr.update(choices=list(algo_df.columns))
    elif file_type == "STAR":
        return gr.update(choices=list(star_df.columns))
    return gr.update(choices=[])

# Reconciliation logic with exclusion
def reconcile_with_rule(algo_df, star_df, file_type, column, operator, value):
    df_algo = algo_df.copy()
    df_star = star_df.copy()
    excluded_df = pd.DataFrame()

    values = [v.strip() for v in value.split(',') if v.strip()]  # Support multiple values

    if file_type == "ALGO" and column in df_algo.columns:
        if operator == "=":
            excluded_df = df_algo[df_algo[column].isin(values)]
            df_algo = df_algo[~df_algo[column].isin(values)]
        else:
            excluded_df = df_algo[~df_algo[column].isin(values)]
            df_algo = df_algo[df_algo[column].isin(values)]
    elif file_type == "STAR" and column in df_star.columns:
        if operator == "=":
            excluded_df = df_star[df_star[column].isin(values)]
            df_star = df_star[~df_star[column].isin(values)]
        else:
            excluded_df = df_star[~df_star[column].isin(values)]
            df_star = df_star[df_star[column].isin(values)]

    # Matching logic
    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched = []

    star_key_map = defaultdict(list)
    for idx, key in enumerate(star_keys):
        star_key_map[key].append(idx)

    matched_star_indices = set()
    matched_algo_indices = set()

    for i, algo_key in enumerate(algo_keys):
        matching_star_idxs = star_key_map.get(algo_key, [])
        if len(matching_star_idxs) == 1 and matching_star_idxs[0] not in matched_star_indices:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": star_keys[matching_star_idxs[0]],
                "Status": "Match"
            })
            matched_star_indices.add(matching_star_idxs[0])
            matched_algo_indices.add(i)
        elif len(matching_star_idxs) > 1:
            for idx in matching_star_idxs:
                unmatched.append({
                    "ALGO Key": algo_key,
                    "STAR Key": star_keys[idx],
                    "Status": "Mismatch - Multiple STAR Keys"
                })
            matched_algo_indices.add(i)
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No Match"
            })

    for idx, star_key in enumerate(star_keys):
        if idx not in matched_star_indices:
            match_found = any(algo_key == star_key for algo_key in algo_keys)
            if not match_found or len(star_key_map[star_key]) > 1:
                unmatched.append({
                    "ALGO Key": "<No Match>",
                    "STAR Key": star_key,
                    "Status": "Mismatch - No Match or Duplicate"
                })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched_df)}\n"
        f"Unmatched Records: {len(unmatched_df)}\n"
        f"Excluded Records: {len(excluded_df)}"
    )

    return excluded_df, matched_df, unmatched_df, summary

# Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("## Reconciliation App with Multi-Value Exclusion Rule")

    algo_df_state = gr.State(pd.DataFrame())
    star_df_state = gr.State(pd.DataFrame())

    with gr.Row():
        algo_file = gr.File(label="Upload ALGO CSV")
        star_file = gr.File(label="Upload STAR CSV")

    with gr.Row():
        file_selector = gr.Dropdown(["ALGO", "STAR"], label="Select File for Rule")
        column_selector = gr.Dropdown(label="Column Name")
        operator_input = gr.Dropdown(["=", "!="], label="Operator")
        value_input = gr.Textbox(label="Value (comma-separated for multiple)")

    run_btn = gr.Button("Run Reconciliation")

    excluded_out = gr.Dataframe(label="Excluded Records")
    matched_out = gr.Dataframe(label="Matched Records")
    unmatched_out = gr.Dataframe(label="Unmatched Records")
    summary_out = gr.Textbox(label="Summary")

    algo_file.change(fn=load_algo_file, inputs=algo_file, outputs=[algo_df_state, column_selector])
    star_file.change(fn=load_star_file, inputs=star_file, outputs=[star_df_state, column_selector])
    file_selector.change(update_column_dropdown,
                         inputs=[file_selector, algo_df_state, star_df_state],
                         outputs=column_selector)

    run_btn.click(
        reconcile_with_rule,
        inputs=[algo_df_state, star_df_state, file_selector, column_selector, operator_input, value_input],
        outputs=[excluded_out, matched_out, unmatched_out, summary_out]
    )

demo.launch()






....,.......,.......


import pandas as pd
import gradio as gr
from collections import defaultdict

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def apply_exclusion(df, file_label, col, op, value):
    if df is None or col is None or value is None or col not in df.columns:
        return df, pd.DataFrame()

    values = [v.strip() for v in value.split(',')]

    if op == "=":
        mask = df[col].isin(values)
    else:  # op == "!="
        mask = ~df[col].isin(values)

    excluded_df = df[~mask]
    filtered_df = df[mask]
    return filtered_df, excluded_df

def reconcile_with_exclusions(algo_file, star_file, file_to_filter, col, op, val):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    excluded_records = pd.DataFrame()

    if file_to_filter == "ALGO File":
        df_algo, excluded_records = apply_exclusion(df_algo, "ALGO", col, op, val)
    elif file_to_filter == "STAR File":
        df_star, excluded_records = apply_exclusion(df_star, "STAR", col, op, val)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched = []

    star_key_map = defaultdict(list)
    for idx, key in enumerate(star_keys):
        star_key_map[key].append(idx)

    matched_star_indices = set()
    matched_algo_indices = set()
    star_key_used_count = defaultdict(int)

    for i, algo_key in enumerate(algo_keys):
        matching_star_idxs = star_key_map.get(algo_key, [])
        if len(matching_star_idxs) == 1 and matching_star_idxs[0] not in matched_star_indices:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": star_keys[matching_star_idxs[0]],
                "Status": "Match"
            })
            matched_star_indices.add(matching_star_idxs[0])
            matched_algo_indices.add(i)
            star_key_used_count[star_keys[matching_star_idxs[0]]] += 1
        elif len(matching_star_idxs) > 1:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Multiple STAR Match>",
                "Status": "Mismatch - Multiple STAR Keys"
            })
            for idx in matching_star_idxs:
                unmatched.append({
                    "ALGO Key": "<No Match>",
                    "STAR Key": star_keys[idx],
                    "Status": "Mismatch - STAR Key in Multiple Match"
                })
            matched_algo_indices.add(i)
            for idx in matching_star_idxs:
                star_key_used_count[star_keys[idx]] += 1
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No STAR Match"
            })

    for idx, star_key in enumerate(star_keys):
        if idx not in matched_star_indices and star_key_used_count[star_key] == 0:
            unmatched.append({
                "ALGO Key": "<No Match>",
                "STAR Key": star_key,
                "Status": "Mismatch - No ALGO Match"
            })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched_df)}\n"
        f"Unmatched Records: {len(unmatched_df)}\n"
        f"Excluded Records: {len(excluded_records)}"
    )

    return matched_df, unmatched_df, excluded_records, summary

# Gradio Interface
def get_columns(algo_file, star_file, file_choice):
    df = pd.read_csv(algo_file if file_choice == "ALGO File" else star_file)
    return list(df.columns)

with gr.Blocks() as demo:
    gr.Markdown("# Reconciliation App with Exclusion & Overmatch Handling")

    with gr.Row():
        algo_input = gr.File(label="Upload ALGO CSV")
        star_input = gr.File(label="Upload STAR CSV")

    with gr.Row():
        file_select = gr.Radio(choices=["ALGO File", "STAR File"], label="Apply Exclusion On", value="ALGO File")
        column_dropdown = gr.Dropdown(label="Column Name")
        action_dropdown = gr.Dropdown(choices=["=", "!="], label="Condition", value="=")
        value_input = gr.Textbox(label="Value(s) (comma-separated)")

    get_cols_btn = gr.Button("Load Columns")

    with gr.Row():
        matched_out = gr.Dataframe(label="Matched Records")
        unmatched_out = gr.Dataframe(label="Unmatched Records")

    excluded_out = gr.Dataframe(label="Excluded Records")
    summary_out = gr.Textbox(label="Summary")

    run_btn = gr.Button("Run Reconciliation")

    get_cols_btn.click(fn=get_columns,
                       inputs=[algo_input, star_input, file_select],
                       outputs=column_dropdown)

    run_btn.click(fn=reconcile_with_exclusions,
                  inputs=[algo_input, star_input, file_select, column_dropdown, action_dropdown, value_input],
                  outputs=[matched_out, unmatched_out, excluded_out, summary_out])

demo.launch()
