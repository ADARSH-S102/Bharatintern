import pandas as pd
import gradio as gr

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    result = []

    for i, algo_key in enumerate(algo_keys):
        status = "Match" if algo_key in star_keys else "Mismatch"
        matched_star = algo_key if status == "Match" else "<Not Found>"

        result.append({
            "Row": i + 1,
            "ALGO Key": algo_key,
            "Matching STAR Key": matched_star,
            "Status": status
        })

    return pd.DataFrame(result)

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=gr.Dataframe(label="Comparison Result"),
    title="Reconciliation App - Flexible Matching",
    description="Each ALGO key is matched against all STAR keys (not index-wise)."
)

demo.launch()









improved -shows match

import pandas as pd
import gradio as gr

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched_algo = []
    unmatched_star = star_keys.copy()

    for algo_key in algo_keys:
        if algo_key in star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            unmatched_star.remove(algo_key)
        else:
            unmatched_algo.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Not Found>",
                "Status": "Mismatch"
            })

    for star_key in unmatched_star:
        unmatched_algo.append({
            "ALGO Key": "<Not Found>",
            "STAR Key": star_key,
            "Status": "Mismatch"
        })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched_algo)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched_algo)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Match vs Mismatch",
    description="Compares ALGO and STAR files by key, showing matched/unmatched rows and summary."
)

demo.launch()













the perfect code 

import pandas as pd
import gradio as gr
from collections import Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    star_counter = Counter(star_keys)
    used_star_keys = set()

    matched = []
    unmatched = []

    for algo_key in algo_keys:
        if star_counter[algo_key] == 1 and algo_key not in used_star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            used_star_keys.add(algo_key)
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Not Found or Duplicate>",
                "Status": "Mismatch"
            })

    # Add remaining unmatched STAR keys
    for star_key in star_keys:
        if star_key not in used_star_keys and star_keys.count(star_key) == 1:
            unmatched.append({
                "ALGO Key": "<Not Found>",
                "STAR Key": star_key,
                "Status": "Mismatch"
            })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Strict 1:1 Matching",
    description="Only one ALGO key can match exactly one STAR key. Duplicates lead to mismatch."
)

demo.launch()










perfection defined 


import pandas as pd
import gradio as gr
from collections import Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    star_counter = Counter(star_keys)
    used_star_keys = set()

    matched = []
    unmatched = []

    for algo_key in algo_keys:
        count = star_counter[algo_key]
        if count == 1 and algo_key not in used_star_keys:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": algo_key,
                "Status": "Match"
            })
            used_star_keys.add(algo_key)
        elif count > 1:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Duplicate in STAR>",
                "Status": "Mismatch - Duplicate"
            })
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No Match"
            })

    # Remaining unmatched STAR keys
    for star_key in star_keys:
        if star_key not in used_star_keys and star_counter[star_key] == 1:
            unmatched.append({
                "ALGO Key": "<No Match>",
                "STAR Key": star_key,
                "Status": "Mismatch - No Match"
            })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched)}\n"
        f"Unmatched Records: {len(unmatched)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Detailed 1:1 Matching",
    description="Each ALGO key matches exactly one STAR key. Shows detailed reason for mismatches."
)

demo.launch()














lets see 

import pandas as pd
import gradio as gr
from collections import defaultdict, Counter

def extract_algo_keys(df):
    return df['Agreement_name'].astype(str).apply(
        lambda x: x.replace('_RIMR', '3CR')
                  .replace('_RIMP', '3CP')
                  .replace(" ", "")
                  .strip()
    ).tolist()

def extract_star_keys(df):
    return df.apply(
        lambda row: (str(row['CRDS Party Code']).strip().replace(" ", "") +
                     "3" +
                     str(row['Post Direction']).strip().replace(" ", "")),
        axis=1
    ).tolist()

def reconcile_files(algo_file, star_file):
    df_algo = pd.read_csv(algo_file).astype(str)
    df_star = pd.read_csv(star_file).astype(str)

    algo_keys = extract_algo_keys(df_algo)
    star_keys = extract_star_keys(df_star)

    matched = []
    unmatched = []

    # Build STAR key-to-index mapping (allow duplicates)
    star_key_map = defaultdict(list)
    for idx, key in enumerate(star_keys):
        star_key_map[key].append(idx)

    matched_star_indices = set()
    matched_algo_indices = set()

    for i, algo_key in enumerate(algo_keys):
        matching_star_idxs = star_key_map.get(algo_key, [])
        if len(matching_star_idxs) == 1 and matching_star_idxs[0] not in matched_star_indices:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": star_keys[matching_star_idxs[0]],
                "Status": "Match"
            })
            matched_star_indices.add(matching_star_idxs[0])
            matched_algo_indices.add(i)
        elif len(matching_star_idxs) > 1:
            # Overmatch: multiple STAR keys match one ALGO key
            for idx in matching_star_idxs:
                unmatched.append({
                    "ALGO Key": algo_key,
                    "STAR Key": star_keys[idx],
                    "Status": "Mismatch - Multiple STAR Keys"
                })
            matched_algo_indices.add(i)
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No Match"
            })

    # Now handle STAR keys that were never matched to any ALGO key
    for idx, star_key in enumerate(star_keys):
        if idx not in matched_star_indices:
            match_found = any(algo_key == star_key for algo_key in algo_keys)
            if not match_found or len(star_key_map[star_key]) > 1:
                unmatched.append({
                    "ALGO Key": "<No Match>",
                    "STAR Key": star_key,
                    "Status": "Mismatch - No Match or Duplicate"
                })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched_df)}\n"
        f"Unmatched Records: {len(unmatched_df)}"
    )

    return matched_df, unmatched_df, summary

# Gradio Interface
demo = gr.Interface(
    fn=reconcile_files,
    inputs=[
        gr.File(label="Upload ALGO CSV File"),
        gr.File(label="Upload STAR CSV File")
    ],
    outputs=[
        gr.Dataframe(label="Matched Records"),
        gr.Dataframe(label="Unmatched Records"),
        gr.Textbox(label="Summary")
    ],
    title="Reconciliation App - Strict 1:1 with STAR Overmatch Handling",
    description="If multiple STAR keys match the same ALGO key, all are moved to the unmatched table."
)

demo.launch()













Master - spring boot

1. ReconciliationController.java
package com.example.reconciliation.controller;

import com.example.reconciliation.service.ReconciliationService;
import com.example.reconciliation.model.ReconciliationResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class ReconciliationController {

    @Autowired
    private ReconciliationService service;

    @GetMapping("/reconcile")
    public ReconciliationResult reconcile() {
        // Provide file paths here
        String algoPath = "C:/path/to/algo.csv";
        String starPath = "C:/path/to/star.csv";
        return service.reconcile(algoPath, starPath);
    }
}



2.ReconciliationService.java

package com.example.reconciliation.service;

import com.example.reconciliation.model.Record;
import com.example.reconciliation.model.ReconciliationResult;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.springframework.stereotype.Service;

import java.io.FileReader;
import java.util.*;

@Service
public class ReconciliationService {

    public ReconciliationResult reconcile(String algoPath, String starPath) {
        List<String> algoKeys = new ArrayList<>();
        List<String> starKeys = new ArrayList<>();
        List<Record> matched = new ArrayList<>();
        List<Record> unmatched = new ArrayList<>();

        try {
            // Read ALGO file
            FileReader readerAlgo = new FileReader(algoPath);
            Iterable<CSVRecord> algoRecords = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(readerAlgo);
            for (CSVRecord record : algoRecords) {
                String key = record.get("Agreement_name")
                        .replace("_RIMR", "3CR")
                        .replace("_RIMP", "3CP")
                        .replaceAll("\\s+", "")
                        .trim();
                algoKeys.add(key);
            }

            // Read STAR file
            FileReader readerStar = new FileReader(starPath);
            Iterable<CSVRecord> starRecords = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(readerStar);
            List<String> starKeyList = new ArrayList<>();
            Map<String, List<Integer>> starKeyMap = new HashMap<>();

            int index = 0;
            for (CSVRecord record : starRecords) {
                String key = record.get("CRDS Party Code").replaceAll("\\s+", "").trim() +
                             "3" +
                             record.get("Post Direction").replaceAll("\\s+", "").trim();
                starKeys.add(key);

                starKeyMap.computeIfAbsent(key, k -> new ArrayList<>()).add(index);
                index++;
            }

            Set<Integer> matchedStarIndices = new HashSet<>();
            Set<Integer> matchedAlgoIndices = new HashSet<>();

            for (int i = 0; i < algoKeys.size(); i++) {
                String algoKey = algoKeys.get(i);
                List<Integer> matchingStarIdxs = starKeyMap.getOrDefault(algoKey, new ArrayList<>());

                if (matchingStarIdxs.size() == 1 && !matchedStarIndices.contains(matchingStarIdxs.get(0))) {
                    matched.add(new Record(algoKey, starKeys.get(matchingStarIdxs.get(0)), "Match"));
                    matchedStarIndices.add(matchingStarIdxs.get(0));
                    matchedAlgoIndices.add(i);
                } else if (matchingStarIdxs.size() > 1) {
                    for (Integer idxStar : matchingStarIdxs) {
                        unmatched.add(new Record(algoKey, starKeys.get(idxStar), "Mismatch - Multiple STAR Keys"));
                    }
                    matchedAlgoIndices.add(i);
                } else {
                    unmatched.add(new Record(algoKey, "<No Match>", "Mismatch - No Match"));
                }
            }

            for (int i = 0; i < starKeys.size(); i++) {
                if (!matchedStarIndices.contains(i)) {
                    unmatched.add(new Record("<No Match>", starKeys.get(i), "Mismatch - No Match or Duplicate"));
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return new ReconciliationResult(matched, unmatched);
    }
}



3. Record.java 

package com.example.reconciliation.model;

public class Record {
    private String algoKey;
    private String starKey;
    private String status;

    public Record(String algoKey, String starKey, String status) {
        this.algoKey = algoKey;
        this.starKey = starKey;
        this.status = status;
    }

    // Getters and setters
    public String getAlgoKey() { return algoKey; }
    public void setAlgoKey(String algoKey) { this.algoKey = algoKey; }

    public String getStarKey() { return starKey; }
    public void setStarKey(String starKey) { this.starKey = starKey; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}


4. ReconciliationResult.java

package com.example.reconciliation.model;

import java.util.List;

public class ReconciliationResult {
    private List<Record> matched;
    private List<Record> unmatched;

    public ReconciliationResult(List<Record> matched, List<Record> unmatched) {
        this.matched = matched;
        this.unmatched = unmatched;
    }

    // Getters and setters
    public List<Record> getMatched() { return matched; }
    public void setMatched(List<Record> matched) { this.matched = matched; }

    public List<Record> getUnmatched() { return unmatched; }
    public void setUnmatched(List<Record> unmatched) { this.unmatched = unmatched; }
}



Dependencies (pom.xml)

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-csv</artifactId>
        <version>1.10.0</version>
    </dependency>
</dependencies>

