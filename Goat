<div class="container">
  <h2>Currencies</h2>

  <button (click)="toggleForm()">+ Add Currency</button>

  <!-- Currency Form -->
  <div *ngIf="showForm">
    <form [formGroup]="currencyForm" (ngSubmit)="addCurrency()">
      <div>
        <label>Abbreviation:</label>
        <input formControlName="abbr" />
      </div>
      <div>
        <label>Description:</label>
        <input formControlName="description" />
      </div>
      <div>
        <label>Decimal Places:</label>
        <input type="number" formControlName="decimalPlaces" />
      </div>
      <div>
        <label>Decimal Character:</label>
        <input formControlName="decimalCharacter" />
      </div>
      <div>
        <label>Thousand Separator:</label>
        <input formControlName="thousandSeparator" />
      </div>
      <button type="submit">Save</button>
    </form>
  </div>

  <!-- Table -->
  <table>
    <thead>
      <tr>
        <th>Abbreviation</th>
        <th>Description</th>
        <th>Decimal Places</th>
        <th>Decimal Character</th>
        <th>Thousand Separator</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let currency of currencies">
        <td>{{ currency.abbr }}</td>
        <td>{{ currency.description }}</td>
        <td>{{ currency.decimalPlaces }}</td>
        <td>{{ currency.decimalCharacter }}</td>
        <td>{{ currency.thousandSeparator }}</td>
      </tr>
    </tbody>
  </table>
</div>










Here’s the rest of the Angular code based on your folder structure:


---

✅ home.component.html

This HTML displays the currency list and provides a form popup when you click the + symbol.

<!-- src/app/components/home/home.component.html -->

<div class="container">
  <h2>Currencies</h2>
  
  <button (click)="toggleForm()">+</button>

  <!-- Currency Form -->
  <div *ngIf="showForm" class="form-popup">
    <form [formGroup]="currencyForm" (ngSubmit)="saveCurrency()">
      <label>
        Abbreviation:
        <input type="text" formControlName="abbr" />
      </label><br />
      
      <label>
        Description:
        <input type="text" formControlName="description" />
      </label><br />
      
      <label>
        Decimal Places:
        <input type="number" formControlName="decimalPlaces" />
      </label><br />
      
      <label>
        Decimal Character:
        <input type="text" formControlName="decimalChar" />
      </label><br />
      
      <label>
        Thousand Separator:
        <input type="text" formControlName="thousandSeparator" />
      </label><br />

      <button type="submit">Save</button>
    </form>
  </div>

  <!-- Currency Table -->
  <table border="1">
    <thead>
      <tr>
        <th>Abbr</th>
        <th>Description</th>
        <th>Decimal Places</th>
        <th>Decimal Char</th>
        <th>Thousand Separator</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let currency of currencies">
        <td>{{ currency.abbr }}</td>
        <td>{{ currency.description }}</td>
        <td>{{ currency.decimalPlaces }}</td>
        <td>{{ currency.decimalChar }}</td>
        <td>{{ currency.thousandSeparator }}</td>
      </tr>
    </tbody>
  </table>
</div>


---

✅ home.service.ts

Handles HTTP requests to your backend.

// src/app/components/home/home.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Currency } from './home.model';

@Injectable()
export class HomeService {
  private baseUrl = 'http://localhost:8080/api/currencies'; // adjust if different

  constructor(private http: HttpClient) {}

  getCurrencies(): Observable<Currency[]> {
    return this.http.get<Currency[]>(this.baseUrl);
  }

  addCurrency(currency: Currency): Observable<any> {
    return this.http.post(this.baseUrl, currency);
  }
}


---

✅ home.model.ts

Define your data model:

// src/app/components/home/home.model.ts

export interface Currency {
  abbr: string;
  description: string;
  decimalPlaces: number;
  decimalChar: string;
  thousandSeparator: string;
}

Let me know if you also want the Spring Boot backend controller + entity + repository to match this!







Thanks for sharing your folder structure. Based on your Angular layout (src/app/components/home/), here’s what you should do to fix your import and component errors:


---

✅ app.module.ts

Make sure you import the HomeComponent and necessary Angular modules correctly:

// src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';
import { HomeComponent } from './components/home/home.component';
import { HomeService } from './components/home/home.service';

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule
  ],
  providers: [HomeService],
  bootstrap: [AppComponent]
})
export class AppModule { }


---

✅ home.component.ts

This version ensures currencyForm is properly initialized:

// src/app/components/home/home.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HomeService } from './home.service';
import { Currency } from './home.model';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {
  currencyForm: FormGroup;
  currencies: Currency[] = [];
  showForm = false;

  constructor(private fb: FormBuilder, private homeService: HomeService) {
    this.currencyForm = this.fb.group({
      abbr: ['', Validators.required],
      description: ['', Validators.required],
      decimalPlaces: [2, [Validators.required, Validators.min(0)]],
      decimalChar: ['.', Validators.required],
      thousandSeparator: [',', Validators.required]
    });
  }

  ngOnInit() {
    this.getCurrencies();
  }

  getCurrencies() {
    this.homeService.getCurrencies().subscribe((data: Currency[]) => {
      this.currencies = data;
    });
  }

  toggleForm() {
    this.showForm = !this.showForm;
  }

  saveCurrency() {
    if (this.currencyForm.valid) {
      const newCurrency = this.currencyForm.value;
      this.homeService.addCurrency(newCurrency).subscribe(() => {
        this.getCurrencies();
        this.currencyForm.reset();
        this.showForm = false;
      });
    }
  }
}


---

Would you also like me to resend the home.component.html and home.service.ts based on this structure and logic?

  
