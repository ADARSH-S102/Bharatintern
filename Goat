Here's the complete and corrected currencies.component.ts and currencies.component.html using a normal checkbox for row selection (no AG Grid selection logic).


---

✅ currencies.component.ts

import {
  Component,
  Inject,
  OnInit,
  PLATFORM_ID,
  ChangeDetectorRef
} from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ColDef, GridReadyEvent, GridApi } from 'ag-grid-community';
import { AgGridModule } from 'ag-grid-angular';
import { HttpErrorResponse } from '@angular/common/http';
import { forkJoin } from 'rxjs';
import { CurrenciesService } from './currencies.service';

export interface Currency {
  id: number;
  abbreviation: string;
  description: string;
  decimalPlaces: number;
  decimalCharacter: string;
  thousandSeparator: string;
}

export interface CurrencyPayload {
  abbreviation: string;
  description: string;
  decimalPlaces: number;
  decimalCharacter: string;
  thousandSeparator: string;
}

@Component({
  selector: 'app-currencies',
  templateUrl: './currencies.component.html',
  styleUrls: ['./currencies.component.css'],
  standalone: true,
  imports: [CommonModule, FormsModule, AgGridModule]
})
export class CurrenciesComponent implements OnInit {
  isBrowser = typeof window !== 'undefined';
  public rowData: Currency[] = [];
  public selectedCurrency: Currency | null = null;
  public formVisible = false;
  public isUpdate = false;
  public gridApi!: GridApi;

  currency: CurrencyPayload = {
    abbreviation: '',
    description: '',
    decimalPlaces: 0,
    decimalCharacter: '',
    thousandSeparator: ''
  };

  columnDefs: ColDef[] = [
    {
      headerName: '',
      field: 'select',
      cellRenderer: (params) => {
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.checked = this.selectedCurrency?.id === params.data.id;

        checkbox.addEventListener('change', () => {
          if (checkbox.checked) {
            this.selectedCurrency = params.data;

            // Uncheck all other checkboxes
            this.gridApi?.forEachNode((node) => {
              if (node.data.id !== params.data.id) {
                const el = node?.gridRowEl?.querySelector('input[type="checkbox"]');
                if (el) (el as HTMLInputElement).checked = false;
              }
            });
          } else {
            this.selectedCurrency = null;
          }
          this.cdRef.detectChanges();
        });

        return checkbox;
      },
      width: 50,
      sortable: false,
      filter: false
    },
    { field: 'abbreviation', headerName: 'Abbreviation', filter: true },
    { field: 'description', headerName: 'Description', filter: true },
    { field: 'decimalPlaces', headerName: 'Decimal Places' },
    { field: 'decimalCharacter', headerName: 'Decimal Character', filter: true },
    { field: 'thousandSeparator', headerName: 'Thousand Separator', filter: true }
  ];

  defaultColDef: ColDef = {
    flex: 1,
    sortable: true,
    filter: true,
    resizable: true
  };

  constructor(
    private service: CurrenciesService,
    @Inject(PLATFORM_ID) private platformId: Object,
    private cdRef: ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    this.loadCurrencies();
  }

  loadCurrencies(): void {
    this.service.getCurrencies().subscribe({
      next: (data: Currency[]) => (this.rowData = data),
      error: (error: any) => console.error('Error fetching currencies:', error)
    });
  }

  onGridReady(params: GridReadyEvent): void {
    if (isPlatformBrowser(this.platformId)) {
      this.gridApi = params.api;
      this.gridApi.sizeColumnsToFit();
    }
  }

  showAddForm(): void {
    this.isUpdate = false;
    this.formVisible = true;
    this.currency = {
      abbreviation: '',
      description: '',
      decimalPlaces: 0,
      decimalCharacter: '',
      thousandSeparator: ''
    };
  }

  showUpdateForm(): void {
    if (this.selectedCurrency) {
      this.isUpdate = true;
      this.formVisible = true;
      this.currency = {
        abbreviation: this.selectedCurrency.abbreviation,
        description: this.selectedCurrency.description,
        decimalPlaces: this.selectedCurrency.decimalPlaces,
        decimalCharacter: this.selectedCurrency.decimalCharacter,
        thousandSeparator: this.selectedCurrency.thousandSeparator
      };
    }
  }

  onSubmit(): void {
    const payload: CurrencyPayload = {
      abbreviation: this.currency.abbreviation,
      description: this.currency.description,
      decimalPlaces: this.currency.decimalPlaces,
      decimalCharacter: this.currency.decimalCharacter,
      thousandSeparator: this.currency.thousandSeparator
    };

    if (this.isUpdate && this.selectedCurrency) {
      this.service.updateCurrency(payload, this.selectedCurrency.id).subscribe(() => {
        this.loadCurrencies();
        this.formVisible = false;
        this.selectedCurrency = null;
      });
    } else {
      this.service.addCurrency(payload).subscribe(() => {
        this.loadCurrencies();
        this.formVisible = false;
      });
    }
  }

  deleteSelectedRates(): void {
    if (this.selectedCurrency && confirm('Are you sure you want to delete this currency?')) {
      this.service.deleteCurrency(this.selectedCurrency.id).subscribe(() => {
        this.loadCurrencies();
        this.selectedCurrency = null;
      });
    }
  }
}


---

✅ currencies.component.html

<div class="button-group">
  <button (click)="showAddForm()">Add Currency</button>
  <button (click)="showUpdateForm()" [disabled]="!selectedCurrency">Update</button>
  <button (click)="deleteSelectedRates()" [disabled]="!selectedCurrency">Delete</button>
</div>

<div class="container">
  <ag-grid-angular
    *ngIf="isBrowser"
    class="ag-theme-balham"
    style="width: 100vw; height: 80vh;"
    [rowData]="rowData"
    [columnDefs]="columnDefs"
    [defaultColDef]="defaultColDef"
    (gridReady)="onGridReady($event)">
  </ag-grid-angular>
</div>

<!-- Modal Form -->
<div *ngIf="formVisible" class="modal">
  <div class="modal-content">
    <span class="close" (click)="formVisible = false">&times;</span>
    <h3>{{ isUpdate ? 'Update Currency' : 'Add Currency' }}</h3>

    <form (ngSubmit)="onSubmit()">
      <label for="abbreviation">Abbreviation</label>
      <input type="text" id="abbreviation" [(ngModel)]="currency.abbreviation" name="abbreviation" required />

      <label for="description">Description</label>
      <input type="text" id="description" [(ngModel)]="currency.description" name="description" required />

      <label for="decimalPlaces">Decimal Places</label>
      <input type="number" id="decimalPlaces" [(ngModel)]="currency.decimalPlaces" name="decimalPlaces" required />

      <label for="decimalCharacter">Decimal Character</label>
      <input type="text" id="decimalCharacter" [(ngModel)]="currency.decimalCharacter" name="decimalCharacter" required />

      <label for="thousandSeparator">Thousand Separator</label>
      <input type="text" id="thousandSeparator" [(ngModel)]="currency.thousandSeparator" name="thousandSeparator" required />

      <div class="form-actions">
        <button type="submit">{{ isUpdate ? 'Update' : 'Add' }}</button>
        <button type="button" (click)="formVisible = false">Cancel</button>
      </div>
    </form>
  </div>
</div>


---

Let me know if you’d like:

Multi-selection support with checkboxes.

Styles for the modal (.css file).

Integration with backend API sample.


All ready to plug-and-play! ✅



        
