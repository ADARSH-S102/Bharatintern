Here's the fully corrected and cleaned-up TypeScript code for your CurrenciesComponent, with proper checkbox selection handling, change detection, and fixed syntax issues:


---

✅ currencies.component.ts

import { Component, Inject, PLATFORM_ID, OnInit, ChangeDetectorRef } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { AgGridModule } from 'ag-grid-angular';
import { ColDef, GridApi, GridOptions, GridReadyEvent } from 'ag-grid-community';
import { HttpErrorResponse } from '@angular/common/http';
import { forkJoin } from 'rxjs';
import { Currenciesservice } from './currencies.service';
import { MatCommonModule } from '@angular/material/core';

export interface Currency {
  id: number;
  abbreviation: string;
  description: string;
  decimalPlaces: number;
  decimalCharacter: string;
  thousandSeparator: string;
}

export interface CurrencyPayload {
  abbreviation: string;
  description: string;
  decimalPlaces: number;
  decimalCharacter: string;
  thousandSeparator: string;
}

@Component({
  selector: 'app-currencies',
  templateUrl: './currencies.component.html',
  styleUrls: ['./currencies.component.css'],
  standalone: true,
  imports: [CommonModule, FormsModule, AgGridModule, MatCommonModule]
})
export class CurrenciesComponent implements OnInit {
  isBrowser: boolean = typeof window !== 'undefined';
  public gridApi!: GridApi;
  public rowData: Currency[] = [];
  public selectedCurrency: Currency | null = null;
  public formVisible = false;
  public isUpdate = false;

  public currency: CurrencyPayload = {
    abbreviation: '',
    description: '',
    decimalPlaces: 0,
    decimalCharacter: '',
    thousandSeparator: ''
  };

  columnDefs: ColDef[] = [
    {
      headerName: '',
      field: 'select',
      cellRenderer: this.checkboxRenderer.bind(this),
      width: 58,
      sortable: false,
      filter: false,
      suppressMovable: true,
      resizable: false
    },
    { field: 'abbreviation', headerName: 'Abbreviation', filter: true },
    { field: 'description', headerName: 'Description', filter: true },
    { field: 'decimalPlaces', headerName: 'Decimal Places' },
    { field: 'decimalCharacter', headerName: 'Decimal Character', filter: true },
    { field: 'thousandSeparator', headerName: 'Thousand Separator', filter: true }
  ];

  defaultColDef: ColDef = {
    flex: 1
  };

  public gridOptions: GridOptions = {
    rowSelection: 'single',
    rowMultiSelectWithClick: false,
    suppressRowClickSelection: true,
    suppressMenuHide: true,
    onSelectionChanged: this.onSelectionChanged.bind(this)
  };

  constructor(
    private service: Currenciesservice,
    @Inject(PLATFORM_ID) private platformId: Object,
    private cdRef: ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    this.loadCurrencies();
  }

  loadCurrencies(): void {
    this.service.getCurrencies().subscribe({
      next: (data: Currency[]) => {
        this.rowData = data;
      },
      error: (error: any) => {
        console.error('Error fetching currencies:', error);
      }
    });
  }

  onGridReady(params: GridReadyEvent): void {
    if (isPlatformBrowser(this.platformId)) {
      this.gridApi = params.api;
      console.log('Grid API initialized');
    }
  }

  onSelectionChanged(): void {
    if (isPlatformBrowser(this.platformId) && this.gridApi) {
      const selectedRows = this.gridApi.getSelectedRows();
      this.selectedCurrency = selectedRows.length ? selectedRows[0] : null;
      this.cdRef.detectChanges();
    } else {
      console.error('Grid API is not available');
    }
  }

  checkboxRenderer(params: any): HTMLElement {
    const div = document.createElement('div');
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.checked = params.node.isSelected();

    checkbox.addEventListener('change', (event: Event) => {
      const isChecked = (event.target as HTMLInputElement).checked;

      if (isChecked) {
        this.gridApi.forEachNode((node) => {
          if (node !== params.node) node.setSelected(false);
        });
        params.node.setSelected(true);
      } else {
        params.node.setSelected(false);
      }

      this.onSelectionChanged();
      this.cdRef.detectChanges();
    });

    div.appendChild(checkbox);
    return div;
  }

  showAddForm(): void {
    this.isUpdate = false;
    this.formVisible = true;
    this.currency = {
      abbreviation: '',
      description: '',
      decimalPlaces: 0,
      decimalCharacter: '',
      thousandSeparator: ''
    };
  }

  showUpdateForm(): void {
    if (this.selectedCurrency) {
      this.isUpdate = true;
      this.formVisible = true;
      this.currency = {
        abbreviation: this.selectedCurrency.abbreviation,
        description: this.selectedCurrency.description,
        decimalPlaces: this.selectedCurrency.decimalPlaces,
        decimalCharacter: this.selectedCurrency.decimalCharacter,
        thousandSeparator: this.selectedCurrency.thousandSeparator
      };
    }
  }

  onSubmit(): void {
    const payload: CurrencyPayload = { ...this.currency };

    if (this.isUpdate && this.selectedCurrency) {
      this.service.updateCurrency(payload, this.selectedCurrency.id).subscribe(() => {
        this.loadCurrencies();
      });
    } else {
      this.service.addCurrency(payload).subscribe(() => {
        this.loadCurrencies();
      });
    }

    this.formVisible = false;
  }

  deleteSelectedRates(): void {
    const selectedNodes = this.gridApi.getSelectedNodes();
    const selectedIds = selectedNodes.map((node) => node.data.id);

    if (!selectedIds.length) {
      alert('No rates selected for deletion.');
      return;
    }

    if (confirm('Are you sure you want to delete the selected rates?')) {
      const deleteRequests = selectedIds.map((id) => this.service.deleteCurrency(id));
      forkJoin(deleteRequests).subscribe({
        next: () => this.loadCurrencies(),
        error: (err: HttpErrorResponse) => console.error('Error deleting rates', err)
      });
    }
  }

  editRate(rate: Currency): void {
    this.selectedCurrency = rate;
    this.currency = {
      abbreviation: rate.abbreviation,
      description: rate.description,
      decimalPlaces: rate.decimalPlaces,
      decimalCharacter: rate.decimalCharacter,
      thousandSeparator: rate.thousandSeparator
    };
    this.formVisible = true;
    this.isUpdate = true;
  }
}


---

✅ Summary of Fixes:

Cleaned all incorrect import syntax.

Corrected checkboxRenderer() to trigger selection and change detection.

Ensured selectedCurrency is properly updated.

Used ChangeDetectorRef to notify Angular of updates.

Bound Update and Delete buttons correctly.



---

Let me know if you'd like the updated HTML cleaned and corrected too!


        
