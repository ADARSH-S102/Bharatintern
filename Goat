Here are the fully fixed versions of both home.service.ts and home.component.ts, ready to work with Angular and your Spring Boot backend.


---

✅ home.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Currency } from './currency.model'; // Adjust path if needed

@Injectable({
  providedIn: 'root'
})
export class HomeService {
  private apiUrl = 'http://localhost:8080/api/currencies'; // Your backend API

  constructor(private http: HttpClient) {}

  getCurrencies(): Observable<Currency[]> {
    return this.http.get<Currency[]>(this.apiUrl);
  }

  addCurrency(currency: Currency): Observable<Currency> {
    return this.http.post<Currency>(this.apiUrl, currency);
  }

  updateCurrency(abbr: string, currency: Currency): Observable<Currency> {
    return this.http.put<Currency>(`${this.apiUrl}/${abbr}`, currency);
  }

  deleteCurrency(abbr: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${abbr}`);
  }
}


---

✅ home.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Currency } from './currency.model';
import { HomeService } from './home.service';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html'
})
export class HomeComponent implements OnInit {
  currencyForm: FormGroup;
  currencies: Currency[] = [];
  selectedCurrency?: Currency;

  constructor(
    private fb: FormBuilder,
    private currencyService: HomeService
  ) {
    this.currencyForm = this.fb.group({
      abbr: ['', Validators.required],
      description: ['', Validators.required],
      decimalPlaces: [2, Validators.required],
      decimalChar: ['.', Validators.required],
      thousandSeparator: [',', Validators.required]
    });
  }

  ngOnInit(): void {
    this.loadCurrencies();
  }

  loadCurrencies(): void {
    this.currencyService.getCurrencies().subscribe((data: Currency[]) => {
      this.currencies = data;
    });
  }

  addCurrency(): void {
    const currency: Currency = this.currencyForm.value;
    if (this.selectedCurrency) {
      this.currencyService.updateCurrency(this.selectedCurrency.abbr, currency).subscribe((updated: Currency) => {
        this.selectedCurrency = undefined;
        this.loadCurrencies();
        this.currencyForm.reset();
      });
    } else {
      this.currencyService.addCurrency(currency).subscribe((newCurrency: Currency) => {
        this.loadCurrencies();
        this.currencyForm.reset();
      });
    }
  }

  editCurrency(currency: Currency): void {
    this.selectedCurrency = currency;
    this.currencyForm.patchValue(currency);
  }

  deleteCurrency(abbr: string): void {
    this.currencyService.deleteCurrency(abbr).subscribe(() => {
      this.loadCurrencies();
    });
  }
}


---

Let me know if you also want:

Updated currency.model.ts

Complete working HTML (home.component.html)

Backend Spring Boot controller/service/repository (for SQL Server)


I'm happy to send those too!















____________
Here's the full set of Angular frontend and Spring Boot backend code, fully fixed to support display, add, update, and delete operations for the currencies table from SQL Server, including select box, delete, and update buttons.


this.currencyService.getCurrencies().subscribe((data: Currency[]) => {
  this.currencies = data;
});


---

✅ Angular Frontend

1. currency.model.ts

export class Currency {
  abbr: string = '';
  description: string = '';
  decimalPlaces: number = 0;
  decimalCharacter: string = '.';
  thousandSeparator: string = ',';
}


---

2. currency.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Currency } from './currency.model';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class CurrencyService {
  private apiUrl = 'http://localhost:8080/api/currencies';

  constructor(private http: HttpClient) {}

  getCurrencies(): Observable<Currency[]> {
    return this.http.get<Currency[]>(this.apiUrl);
  }

  addCurrency(currency: Currency): Observable<Currency> {
    return this.http.post<Currency>(this.apiUrl, currency);
  }

  deleteCurrency(abbr: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${abbr}`);
  }

  updateCurrency(abbr: string, currency: Currency): Observable<Currency> {
    return this.http.put<Currency>(`${this.apiUrl}/${abbr}`, currency);
  }
}


---

3. home.component.ts

import { Component, OnInit } from '@angular/core';
import { Currency } from '../currency.model';
import { CurrencyService } from '../currency.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html'
})
export class HomeComponent implements OnInit {
  currencies: Currency[] = [];
  selectedCurrency?: Currency;
  currencyForm!: FormGroup;

  constructor(
    private currencyService: CurrencyService,
    private fb: FormBuilder
  ) {}

  ngOnInit(): void {
    this.loadCurrencies();
    this.currencyForm = this.fb.group({
      abbr: ['', Validators.required],
      description: ['', Validators.required],
      decimalPlaces: [0, Validators.required],
      decimalCharacter: ['.', Validators.required],
      thousandSeparator: [',', Validators.required]
    });
  }

  loadCurrencies() {
    this.currencyService.getCurrencies().subscribe(data => this.currencies = data);
  }

  onSubmit() {
    if (this.currencyForm.valid) {
      const currency = this.currencyForm.value;
      if (this.selectedCurrency) {
        this.currencyService.updateCurrency(this.selectedCurrency.abbr, currency).subscribe(() => {
          this.selectedCurrency = undefined;
          this.loadCurrencies();
          this.currencyForm.reset();
        });
      } else {
        this.currencyService.addCurrency(currency).subscribe(() => {
          this.loadCurrencies();
          this.currencyForm.reset();
        });
      }
    }
  }

  onDelete(abbr: string) {
    this.currencyService.deleteCurrency(abbr).subscribe(() => this.loadCurrencies());
  }

  onEdit(currency: Currency) {
    this.selectedCurrency = currency;
    this.currencyForm.patchValue(currency);
  }
}


---

4. home.component.html

<h2>Currencies</h2>

<form [formGroup]="currencyForm" (ngSubmit)="onSubmit()">
  <label>Abbreviation: <input formControlName="abbr"></label><br>
  <label>Description: <input formControlName="description"></label><br>
  <label>Decimal Places: <input type="number" formControlName="decimalPlaces"></label><br>
  <label>Decimal Character: <input formControlName="decimalCharacter"></label><br>
  <label>Thousand Separator: <input formControlName="thousandSeparator"></label><br>
  <button type="submit">{{ selectedCurrency ? 'Update' : 'Add' }}</button>
</form>

<table>
  <thead>
    <tr>
      <th>Select</th>
      <th>Abbr</th>
      <th>Description</th>
      <th>Decimal Places</th>
      <th>Decimal Char</th>
      <th>Thousand Sep</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let currency of currencies">
      <td><input type="radio" (click)="onEdit(currency)"></td>
      <td>{{ currency.abbr }}</td>
      <td>{{ currency.description }}</td>
      <td>{{ currency.decimalPlaces }}</td>
      <td>{{ currency.decimalCharacter }}</td>
      <td>{{ currency.thousandSeparator }}</td>
      <td>
        <button (click)="onDelete(currency.abbr)">Delete</button>
      </td>
    </tr>
  </tbody>
</table>


---

✅ Spring Boot Backend

1. Currency.java (Entity)

@Entity
@Table(name = "currencies")
public class Currency {
    @Id
    private String abbr;

    private String description;
    private int decimalPlaces;
    private String decimalCharacter;
    private String thousandSeparator;

    // Getters and Setters
}


---

2. CurrencyRepository.java

@Repository
public interface CurrencyRepository extends JpaRepository<Currency, String> {
}


---

3. CurrencyController.java

@RestController
@RequestMapping("/api/currencies")
@CrossOrigin(origins = "http://localhost:4200")
public class CurrencyController {

    @Autowired
    private CurrencyRepository currencyRepository;

    @GetMapping
    public List<Currency> getAll() {
        return currencyRepository.findAll();
    }

    @PostMapping
    public Currency create(@RequestBody Currency currency) {
        return currencyRepository.save(currency);
    }

    @DeleteMapping("/{abbr}")
    public void delete(@PathVariable String abbr) {
        currencyRepository.deleteById(abbr);
    }

    @PutMapping("/{abbr}")
    public Currency update(@PathVariable String abbr, @RequestBody Currency updated) {
        Currency existing = currencyRepository.findById(abbr).orElseThrow();
        existing.setDescription(updated.getDescription());
        existing.setDecimalPlaces(updated.getDecimalPlaces());
        existing.setDecimalCharacter(updated.getDecimalCharacter());
        existing.setThousandSeparator(updated.getThousandSeparator());
        return currencyRepository.save(existing);
    }
}


---

4. CurrencyApplication.java

@SpringBootApplication
public class CurrencyApplication {
    public static void main(String[] args) {
        SpringApplication.run(CurrencyApplication.class, args);
    }
}


---

Let me know if you'd like the SQL insert statements or the database connection setup for Spring Boot (application.properties).















_________$$$$______________
Here’s the complete Spring Boot backend to support your Angular UI with full CRUD operations on the currencies table in SQL Server.


---

✅ 1. Currency.java (Entity)

package com.example.currencyapp.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "currencies")
public class Currency {
    @Id
    private String abbr;
    private String description;
    private int decimalPlaces;
    private String decimalCharacter;
    private String thousandSeparator;

    // Getters and setters
    public String getAbbr() { return abbr; }
    public void setAbbr(String abbr) { this.abbr = abbr; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public int getDecimalPlaces() { return decimalPlaces; }
    public void setDecimalPlaces(int decimalPlaces) { this.decimalPlaces = decimalPlaces; }

    public String getDecimalCharacter() { return decimalCharacter; }
    public void setDecimalCharacter(String decimalCharacter) { this.decimalCharacter = decimalCharacter; }

    public String getThousandSeparator() { return thousandSeparator; }
    public void setThousandSeparator(String thousandSeparator) { this.thousandSeparator = thousandSeparator; }
}


---

✅ 2. CurrencyRepository.java

package com.example.currencyapp.repository;

import com.example.currencyapp.model.Currency;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CurrencyRepository extends JpaRepository<Currency, String> {
}


---

✅ 3. CurrencyController.java

package com.example.currencyapp.controller;

import com.example.currencyapp.model.Currency;
import com.example.currencyapp.repository.CurrencyRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/currencies")
@CrossOrigin(origins = "http://localhost:4200")
public class CurrencyController {

    @Autowired
    private CurrencyRepository repository;

    @GetMapping
    public List<Currency> getAllCurrencies() {
        return repository.findAll();
    }

    @PutMapping("/{abbr}")
    public Currency updateCurrency(@PathVariable String abbr, @RequestBody Currency currency) {
        if (!repository.existsById(abbr)) {
            throw new RuntimeException("Currency not found");
        }
        return repository.save(currency);
    }

    @DeleteMapping("/{abbr}")
    public void deleteCurrency(@PathVariable String abbr) {
        repository.deleteById(abbr);
    }
}


---

✅ 4. CurrencyApplication.java

package com.example.currencyapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CurrencyApplication {
    public static void main(String[] args) {
        SpringApplication.run(CurrencyApplication.class, args);
    }
}


---

✅ 5. application.properties

spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=YourDatabaseName
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

Make sure to add this dependency to your pom.xml:

<dependency>
    <groupId>com.microsoft.sqlserver</groupId>
    <artifactId>mssql-jdbc</artifactId>
    <version>12.4.2.jre11</version> <!-- Or your JDK version -->
</dependency>


---

Let me know if you want to:

Add new currencies via POST (with a /add endpoint),

Include validation (e.g., @NotNull or @Size),

Or create a test data loader on startup.


I can help with those too.





..
_________________________________________________________________________________
Here’s the complete updated code with the update/delete functionality added without deleting any original logic.


---

✅ home.component.ts

import { Component, OnInit } from '@angular/core';
import { CurrencyService, Currency } from '../services/currency.service';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
})
export class HomeComponent implements OnInit {
  currencies: Currency[] = [];
  selectedCurrency: Currency | null = null;

  constructor(private currencyService: CurrencyService) {}

  ngOnInit(): void {
    this.getCurrencies();
  }

  getCurrencies() {
    this.currencyService.getCurrencies().subscribe((data) => {
      this.currencies = data;
    });
  }

  selectCurrency(currency: Currency) {
    this.selectedCurrency = { ...currency }; // clone to avoid binding issues
  }

  onDelete() {
    if (this.selectedCurrency) {
      this.currencyService.deleteCurrency(this.selectedCurrency.abbr).subscribe(() => {
        this.getCurrencies();
        this.selectedCurrency = null;
      });
    }
  }

  onUpdate() {
    if (!this.selectedCurrency) {
      alert('Select a row to update.');
    }
    // The update form is shown automatically by *ngIf
  }

  submitUpdate() {
    if (this.selectedCurrency) {
      this.currencyService.updateCurrency(this.selectedCurrency).subscribe(() => {
        this.getCurrencies();
        this.selectedCurrency = null;
      });
    }
  }
}


---

✅ home.component.html

<table>
  <thead>
    <tr>
      <th>Select</th>
      <th>Abbreviation</th>
      <th>Description</th>
      <th>Decimal Places</th>
      <th>Decimal Character</th>
      <th>Thousand Separator</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let currency of currencies">
      <td>
        <input
          type="radio"
          name="selectedCurrency"
          (click)="selectCurrency(currency)"
        />
      </td>
      <td>{{ currency.abbr }}</td>
      <td>{{ currency.description }}</td>
      <td>{{ currency.decimalPlaces }}</td>
      <td>{{ currency.decimalCharacter }}</td>
      <td>{{ currency.thousandSeparator }}</td>
    </tr>
  </tbody>
</table>

<button (click)="onUpdate()">Update</button>
<button (click)="onDelete()">Delete</button>

<!-- Update Form -->
<form *ngIf="selectedCurrency" (submit)="submitUpdate()">
  <label>
    Description:
    <input
      [(ngModel)]="selectedCurrency.description"
      name="description"
      required
    />
  </label>
  <label>
    Decimal Places:
    <input
      [(ngModel)]="selectedCurrency.decimalPlaces"
      name="decimalPlaces"
      type="number"
      required
    />
  </label>
  <label>
    Decimal Character:
    <input
      [(ngModel)]="selectedCurrency.decimalCharacter"
      name="decimalCharacter"
      required
    />
  </label>
  <label>
    Thousand Separator:
    <input
      [(ngModel)]="selectedCurrency.thousandSeparator"
      name="thousandSeparator"
      required
    />
  </label>
  <button type="submit">Save Changes</button>
</form>


---

✅ currency.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

export interface Currency {
  abbr: string;
  description: string;
  decimalPlaces: number;
  decimalCharacter: string;
  thousandSeparator: string;
}

@Injectable({
  providedIn: 'root',
})
export class CurrencyService {
  private apiUrl = 'http://localhost:8080/api/currencies';

  constructor(private http: HttpClient) {}

  getCurrencies(): Observable<Currency[]> {
    return this.http.get<Currency[]>(this.apiUrl);
  }

  updateCurrency(currency: Currency): Observable<any> {
    return this.http.put(`${this.apiUrl}/${currency.abbr}`, currency);
  }

  deleteCurrency(abbr: string): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${abbr}`);
  }
}


---

Let me know if you'd like:

Toast alerts for success/failure.

A modal (popup) form instead of an inline one.

Support for multi-select delete.


I'll help with that too!




















__________________________________________

package com.example.currency;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CurrencyApplication {

    public static void main(String[] args) {
        SpringApplication.run(CurrencyApplication.class, args);
    }
}









Here’s the complete Spring Boot backend code for connecting to a SQL Server and managing the currencies table:


---

📄 Currency.java – Entity Class

package com.example.currency.model;

import jakarta.persistence.*;

@Entity
@Table(name = "currencies")
public class Currency {

    @Id
    private String abbr;

    private String description;

    @Column(name = "decimal_places")
    private int decimalPlaces;

    @Column(name = "decimal_character")
    private String decimalCharacter;

    @Column(name = "thousand_separator")
    private String thousandSeparator;

    // Getters and Setters
    public String getAbbr() { return abbr; }
    public void setAbbr(String abbr) { this.abbr = abbr; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public int getDecimalPlaces() { return decimalPlaces; }
    public void setDecimalPlaces(int decimalPlaces) { this.decimalPlaces = decimalPlaces; }

    public String getDecimalCharacter() { return decimalCharacter; }
    public void setDecimalCharacter(String decimalCharacter) { this.decimalCharacter = decimalCharacter; }

    public String getThousandSeparator() { return thousandSeparator; }
    public void setThousandSeparator(String thousandSeparator) { this.thousandSeparator = thousandSeparator; }
}


---

📄 CurrencyRepository.java

package com.example.currency.repository;

import com.example.currency.model.Currency;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CurrencyRepository extends JpaRepository<Currency, String> {
}


---

📄 CurrencyController.java

package com.example.currency.controller;

import com.example.currency.model.Currency;
import com.example.currency.repository.CurrencyRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/api/currencies")
public class CurrencyController {

    private final CurrencyRepository repository;

    public CurrencyController(CurrencyRepository repository) {
        this.repository = repository;
    }

    @GetMapping
    public List<Currency> getAll() {
        return repository.findAll();
    }

    @PostMapping
    public Currency add(@RequestBody Currency currency) {
        return repository.save(currency);
    }
}


---

📄 application.properties

spring.datasource.url=jdbc:sqlserver://<HOST>:<PORT>;databaseName=<DB_NAME>
spring.datasource.username=<YOUR_DB_USER>
spring.datasource.password=<YOUR_DB_PASSWORD>
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver

spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.SQLServerDialect

Replace:

<HOST> with your SQL Server hostname (e.g., localhost)

<PORT> with your SQL Server port (default is 1433)

<DB_NAME>, <YOUR_DB_USER>, <YOUR_DB_PASSWORD> accordingly



---

📄 Add SQL Server Driver in pom.xml

<dependency>
    <groupId>com.microsoft.sqlserver</groupId>
    <artifactId>mssql-jdbc</artifactId>
    <version>11.2.1.jre17</version>
</dependency>


---

Let me know when you're ready to connect this API to your Angular UI to display currency values.















Thanks! Here's how to configure Spring Boot with Oracle DB, using your currencies table.


---

✅ Spring Boot + Oracle Setup for currencies Table


---

✅ 1. Currency.java Entity (for table currencies)

package com.example.currency.model;

import jakarta.persistence.*;

@Entity
@Table(name = "currencies")
public class Currency {

    @Id
    private String abbr;

    private String description;

    @Column(name = "decimal_places")
    private int decimalPlaces;

    @Column(name = "decimal_character")
    private String decimalCharacter;

    @Column(name = "thousand_separator")
    private String thousandSeparator;

    // Getters and setters
    public String getAbbr() { return abbr; }
    public void setAbbr(String abbr) { this.abbr = abbr; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public int getDecimalPlaces() { return decimalPlaces; }
    public void setDecimalPlaces(int decimalPlaces) { this.decimalPlaces = decimalPlaces; }

    public String getDecimalCharacter() { return decimalCharacter; }
    public void setDecimalCharacter(String decimalCharacter) { this.decimalCharacter = decimalCharacter; }

    public String getThousandSeparator() { return thousandSeparator; }
    public void setThousandSeparator(String thousandSeparator) { this.thousandSeparator = thousandSeparator; }
}


---

✅ 2. CurrencyRepository.java

package com.example.currency.repository;

import com.example.currency.model.Currency;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CurrencyRepository extends JpaRepository<Currency, String> {
}


---

✅ 3. CurrencyController.java

package com.example.currency.controller;

import com.example.currency.model.Currency;
import com.example.currency.repository.CurrencyRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/api/currencies")
public class CurrencyController {

    private final CurrencyRepository repository;

    public CurrencyController(CurrencyRepository repository) {
        this.repository = repository;
    }

    @GetMapping
    public List<Currency> getAllCurrencies() {
        return repository.findAll();
    }

    @PostMapping
    public Currency addCurrency(@RequestBody Currency currency) {
        return repository.save(currency);
    }
}


---

✅ 4. application.properties (Oracle version)

spring.datasource.url=jdbc:oracle:thin:@<HOST>:<PORT>:<SID>  # Example: jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_oracle_user
spring.datasource.password=your_oracle_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none  # Keep "none" to avoid modifying Oracle schema

> ✅ Make sure Oracle JDBC driver is in your classpath.
If you use Maven, you may need to manually install the Oracle driver into your local Maven repo, since it's not public.




---

✅ 5. pom.xml - Add Oracle JDBC and Spring Boot dependencies

<dependencies>
    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Boot JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- Oracle JDBC (you must install it manually) -->
    <dependency>
        <groupId>com.oracle.database.jdbc</groupId>
        <artifactId>ojdbc8</artifactId>
        <version>19.3.0.0</version>
    </dependency>
</dependencies>

> You may need to install ojdbc8.jar manually using:



mvn install:install-file -Dfile=/path/to/ojdbc8.jar -DgroupId=com.oracle.database.jdbc -DartifactId=ojdbc8 -Dversion=19.3.0.0 -Dpackaging=jar


---

Once you run the app, test with:

GET  http://localhost:8080/api/currencies

To fetch all currency rows.

Would you like a downloadable Spring Boot project starter with this Oracle setup?















Here’s the full corrected and working version of the Angular component and HTML with all the changes made so far:

---

### ✅ `home.component.ts`

```ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HomeService } from './home.service';
import { Currency } from './home.model';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html'
})
export class HomeComponent implements OnInit {
  currencies: Currency[] = [];
  currencyForm: FormGroup;
  showForm = false;

  constructor(private fb: FormBuilder, private homeService: HomeService) {}

  ngOnInit(): void {
    this.currencyForm = this.fb.group({
      abbr: ['', Validators.required],
      description: ['', Validators.required],
      decimalPlaces: [0, Validators.required],
      decimalCharacter: ['', Validators.required],
      thousandSeparator: ['', Validators.required]
    });

    this.getCurrencies();
  }

  getCurrencies(): void {
    this.homeService.getCurrencies().subscribe(data => {
      this.currencies = data;
    });
  }

  toggleForm(): void {
    this.showForm = !this.showForm;
    this.currencyForm.reset(); // Optional: reset form when toggling
  }

  addCurrency(): void {
    if (this.currencyForm.valid) {
      const newCurrency: Currency = this.currencyForm.value;
      this.homeService.addCurrency(newCurrency).subscribe(() => {
        this.getCurrencies();
        this.currencyForm.reset();
        this.showForm = false;
      });
    }
  }
}
```

---

### ✅ `home.component.html`

```html
<div class="container">
  <h2>Currencies</h2>

  <button (click)="toggleForm()">+ Add Currency</button>

  <!-- Currency Form -->
  <div *ngIf="showForm">
    <form [formGroup]="currencyForm" (ngSubmit)="addCurrency()">
      <div>
        <label>Abbreviation:</label>
        <input formControlName="abbr" />
      </div>
      <div>
        <label>Description:</label>
        <input formControlName="description" />
      </div>
      <div>
        <label>Decimal Places:</label>
        <input type="number" formControlName="decimalPlaces" />
      </div>
      <div>
        <label>Decimal Character:</label>
        <input formControlName="decimalCharacter" />
      </div>
      <div>
        <label>Thousand Separator:</label>
        <input formControlName="thousandSeparator" />
      </div>
      <button type="submit">Save</button>
    </form>
  </div>

  <!-- Table -->
  <table border="1">
    <thead>
      <tr>
        <th>Abbreviation</th>
        <th>Description</th>
        <th>Decimal Places</th>
        <th>Decimal Character</th>
        <th>Thousand Separator</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let currency of currencies">
        <td>{{ currency.abbr }}</td>
        <td>{{ currency.description }}</td>
        <td>{{ currency.decimalPlaces }}</td>
        <td>{{ currency.decimalCharacter }}</td>
        <td>{{ currency.thousandSeparator }}</td>
      </tr>
    </tbody>
  </table>
</div>
```

---

Let me know if you want:

* The matching `home.service.ts`
* The `Currency` model (`home.model.ts`)
* Or help wiring it into the backend

Would you like me to package this into a working Angular module setup as well?








<div class="container">
  <h2>Currencies</h2>

  <button (click)="toggleForm()">+ Add Currency</button>

  <!-- Currency Form -->
  <div *ngIf="showForm">
    <form [formGroup]="currencyForm" (ngSubmit)="addCurrency()">
      <div>
        <label>Abbreviation:</label>
        <input formControlName="abbr" />
      </div>
      <div>
        <label>Description:</label>
        <input formControlName="description" />
      </div>
      <div>
        <label>Decimal Places:</label>
        <input type="number" formControlName="decimalPlaces" />
      </div>
      <div>
        <label>Decimal Character:</label>
        <input formControlName="decimalCharacter" />
      </div>
      <div>
        <label>Thousand Separator:</label>
        <input formControlName="thousandSeparator" />
      </div>
      <button type="submit">Save</button>
    </form>
  </div>

  <!-- Table -->
  <table>
    <thead>
      <tr>
        <th>Abbreviation</th>
        <th>Description</th>
        <th>Decimal Places</th>
        <th>Decimal Character</th>
        <th>Thousand Separator</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let currency of currencies">
        <td>{{ currency.abbr }}</td>
        <td>{{ currency.description }}</td>
        <td>{{ currency.decimalPlaces }}</td>
        <td>{{ currency.decimalCharacter }}</td>
        <td>{{ currency.thousandSeparator }}</td>
      </tr>
    </tbody>
  </table>
</div>










Here’s the rest of the Angular code based on your folder structure:


---

✅ home.component.html

This HTML displays the currency list and provides a form popup when you click the + symbol.

<!-- src/app/components/home/home.component.html -->

<div class="container">
  <h2>Currencies</h2>
  
  <button (click)="toggleForm()">+</button>

  <!-- Currency Form -->
  <div *ngIf="showForm" class="form-popup">
    <form [formGroup]="currencyForm" (ngSubmit)="saveCurrency()">
      <label>
        Abbreviation:
        <input type="text" formControlName="abbr" />
      </label><br />
      
      <label>
        Description:
        <input type="text" formControlName="description" />
      </label><br />
      
      <label>
        Decimal Places:
        <input type="number" formControlName="decimalPlaces" />
      </label><br />
      
      <label>
        Decimal Character:
        <input type="text" formControlName="decimalChar" />
      </label><br />
      
      <label>
        Thousand Separator:
        <input type="text" formControlName="thousandSeparator" />
      </label><br />

      <button type="submit">Save</button>
    </form>
  </div>

  <!-- Currency Table -->
  <table border="1">
    <thead>
      <tr>
        <th>Abbr</th>
        <th>Description</th>
        <th>Decimal Places</th>
        <th>Decimal Char</th>
        <th>Thousand Separator</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let currency of currencies">
        <td>{{ currency.abbr }}</td>
        <td>{{ currency.description }}</td>
        <td>{{ currency.decimalPlaces }}</td>
        <td>{{ currency.decimalChar }}</td>
        <td>{{ currency.thousandSeparator }}</td>
      </tr>
    </tbody>
  </table>
</div>


---

✅ home.service.ts

Handles HTTP requests to your backend.

// src/app/components/home/home.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Currency } from './home.model';

@Injectable()
export class HomeService {
  private baseUrl = 'http://localhost:8080/api/currencies'; // adjust if different

  constructor(private http: HttpClient) {}

  getCurrencies(): Observable<Currency[]> {
    return this.http.get<Currency[]>(this.baseUrl);
  }

  addCurrency(currency: Currency): Observable<any> {
    return this.http.post(this.baseUrl, currency);
  }
}


---

✅ home.model.ts

Define your data model:

// src/app/components/home/home.model.ts

export interface Currency {
  abbr: string;
  description: string;
  decimalPlaces: number;
  decimalChar: string;
  thousandSeparator: string;
}

Let me know if you also want the Spring Boot backend controller + entity + repository to match this!







Thanks for sharing your folder structure. Based on your Angular layout (src/app/components/home/), here’s what you should do to fix your import and component errors:


---

✅ app.module.ts

Make sure you import the HomeComponent and necessary Angular modules correctly:

// src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';
import { HomeComponent } from './components/home/home.component';
import { HomeService } from './components/home/home.service';

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule
  ],
  providers: [HomeService],
  bootstrap: [AppComponent]
})
export class AppModule { }


---

✅ home.component.ts

This version ensures currencyForm is properly initialized:

// src/app/components/home/home.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HomeService } from './home.service';
import { Currency } from './home.model';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {
  currencyForm: FormGroup;
  currencies: Currency[] = [];
  showForm = false;

  constructor(private fb: FormBuilder, private homeService: HomeService) {
    this.currencyForm = this.fb.group({
      abbr: ['', Validators.required],
      description: ['', Validators.required],
      decimalPlaces: [2, [Validators.required, Validators.min(0)]],
      decimalChar: ['.', Validators.required],
      thousandSeparator: [',', Validators.required]
    });
  }

  ngOnInit() {
    this.getCurrencies();
  }

  getCurrencies() {
    this.homeService.getCurrencies().subscribe((data: Currency[]) => {
      this.currencies = data;
    });
  }

  toggleForm() {
    this.showForm = !this.showForm;
  }

  saveCurrency() {
    if (this.currencyForm.valid) {
      const newCurrency = this.currencyForm.value;
      this.homeService.addCurrency(newCurrency).subscribe(() => {
        this.getCurrencies();
        this.currencyForm.reset();
        this.showForm = false;
      });
    }
  }
}


---

Would you also like me to resend the home.component.html and home.service.ts based on this structure and logic?

  
