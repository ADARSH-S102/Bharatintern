Great! Let's start with #1: The Angular codebase for the Currency Module â€” including the full UI structure with table, modal form, validations, and service integration.


---

Angular Currency Module (Step-by-Step)

1. Generate Component and Service

ng generate component currencies
ng generate service currency


---

2. currencies.component.html (UI Template)

<div class="toolbar">
  <button (click)="openModal()">+ Add Currency</button>
</div>

<table>
  <thead>
    <tr>
      <th>Abbreviation</th>
      <th>Description</th>
      <th>Decimal Places</th>
      <th>Decimal Char</th>
      <th>Thousand Separator</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let currency of currencies">
      <td>{{ currency.abbr }}</td>
      <td>{{ currency.description }}</td>
      <td>{{ currency.decimalPlaces }}</td>
      <td>{{ currency.decimalChar }}</td>
      <td>{{ currency.thousandSeparator }}</td>
      <td>
        <button (click)="editCurrency(currency)">Edit</button>
        <button (click)="deleteCurrency(currency.id)">Delete</button>
      </td>
    </tr>
  </tbody>
</table>

<!-- Modal -->
<div *ngIf="showModal" class="modal">
  <form (ngSubmit)="saveCurrency()" #currencyForm="ngForm">
    <input name="abbr" [(ngModel)]="form.abbr" placeholder="Abbreviation" required />
    <input name="description" [(ngModel)]="form.description" placeholder="Description" required />
    <input name="decimalPlaces" [(ngModel)]="form.decimalPlaces" type="number" placeholder="Decimal Places" required />
    <input name="decimalChar" [(ngModel)]="form.decimalChar" placeholder="Decimal Char" required maxlength="1" />
    <input name="thousandSeparator" [(ngModel)]="form.thousandSeparator" placeholder="Thousand Separator" required maxlength="1" />
    
    <button type="submit" [disabled]="!currencyForm.form.valid">Save</button>
    <button type="button" (click)="closeModal()">Cancel</button>
  </form>
</div>


---

3. currencies.component.ts (Logic)

import { Component, OnInit } from '@angular/core';
import { CurrencyService } from '../currency.service';

@Component({
  selector: 'app-currencies',
  templateUrl: './currencies.component.html',
  styleUrls: ['./currencies.component.css']
})
export class CurrenciesComponent implements OnInit {
  currencies: any[] = [];
  showModal = false;
  form: any = {};

  constructor(private currencyService: CurrencyService) {}

  ngOnInit() {
    this.getCurrencies();
  }

  getCurrencies() {
    this.currencyService.getAll().subscribe(data => this.currencies = data);
  }

  openModal() {
    this.form = {};
    this.showModal = true;
  }

  closeModal() {
    this.showModal = false;
  }

  saveCurrency() {
    if (this.form.id) {
      this.currencyService.update(this.form.id, this.form).subscribe(() => {
        this.getCurrencies();
        this.closeModal();
      });
    } else {
      this.currencyService.create(this.form).subscribe(() => {
        this.getCurrencies();
        this.closeModal();
      });
    }
  }

  editCurrency(currency: any) {
    this.form = { ...currency };
    this.showModal = true;
  }

  deleteCurrency(id: number) {
    this.currencyService.delete(id).subscribe(() => this.getCurrencies());
  }
}


---

4. currency.service.ts (API Service)

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class CurrencyService {
  private baseUrl = 'http://localhost:8080/api/currencies';

  constructor(private http: HttpClient) {}

  getAll() {
    return this.http.get<any[]>(this.baseUrl);
  }

  create(currency: any) {
    return this.http.post(this.baseUrl, currency);
  }

  update(id: number, currency: any) {
    return this.http.put(`${this.baseUrl}/${id}`, currency);
  }

  delete(id: number) {
    return this.http.delete(`${this.baseUrl}/${id}`);
  }
}


---

5. Import FormsModule and HttpClientModule

In app.module.ts:

import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  imports: [FormsModule, HttpClientModule]
})
export class AppModule {}


---

6. Basic CSS (currencies.component.css)

.modal {
  background: white;
  padding: 20px;
  border: 1px solid #ccc;
  position: fixed;
  top: 20%;
  left: 30%;
  width: 40%;
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
  z-index: 1000;
}


---

Next:

Want me to provide the Spring Boot backend to connect this to?

I can also provide test cases and documentation templates next.


Let me know!

