Here's the complete working Angular setup for your Currency UI module, including the changes made to ensure currencyForm works without errors:


---

✅ 1. app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';
import { HomeComponent } from './home/home.component';

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent
  ],
  imports: [
    BrowserModule,
    ReactiveFormsModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


---

✅ 2. currency.service.ts (inside src/app/services/)

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class CurrencyService {
  private apiUrl = 'http://localhost:8080/api/currencies'; // Replace with your backend URL

  constructor(private http: HttpClient) {}

  getCurrencies(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl);
  }

  addCurrency(currency: any): Observable<any> {
    return this.http.post<any>(this.apiUrl, currency);
  }
}


---

✅ 3. home.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CurrencyService } from '../services/currency.service';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html'
})
export class HomeComponent implements OnInit {
  currencyForm: FormGroup;
  currencies: any[] = [];
  showForm: boolean = false;

  constructor(
    private fb: FormBuilder,
    private currencyService: CurrencyService
  ) {}

  ngOnInit(): void {
    this.currencyForm = this.fb.group({
      abbr: ['', Validators.required],
      description: ['', Validators.required],
      decimalPlaces: [0, [Validators.required, Validators.min(0), Validators.max(10)]],
      decimalChar: ['', Validators.required],
      thousandSeparator: ['', Validators.required]
    });

    this.loadCurrencies();
  }

  loadCurrencies(): void {
    this.currencyService.getCurrencies().subscribe(data => {
      this.currencies = data;
    });
  }

  onSubmit(): void {
    if (this.currencyForm.valid) {
      this.currencyService.addCurrency(this.currencyForm.value).subscribe(() => {
        this.loadCurrencies();
        this.currencyForm.reset();
        this.showForm = false;
      });
    }
  }

  openForm(): void {
    this.showForm = true;
  }

  closeForm(): void {
    this.showForm = false;
  }
}


---

✅ 4. home.component.html

<div class="container">
  <h2>Currencies</h2>
  <button (click)="openForm()">+ Add Currency</button>

  <table border="1" cellpadding="5" cellspacing="0">
    <tr>
      <th>Abbreviation</th>
      <th>Description</th>
      <th>Decimal Places</th>
      <th>Decimal Character</th>
      <th>Thousand Separator</th>
    </tr>
    <tr *ngFor="let currency of currencies">
      <td>{{ currency.abbr }}</td>
      <td>{{ currency.description }}</td>
      <td>{{ currency.decimalPlaces }}</td>
      <td>{{ currency.decimalChar }}</td>
      <td>{{ currency.thousandSeparator }}</td>
    </tr>
  </table>

  <div *ngIf="showForm" style="margin-top: 20px;">
    <h3>Add Currency</h3>
    <form [formGroup]="currencyForm" (ngSubmit)="onSubmit()">
      <label>
        Abbreviation:
        <input type="text" formControlName="abbr">
      </label><br><br>
      <label>
        Description:
        <input type="text" formControlName="description">
      </label><br><br>
      <label>
        Decimal Places:
        <input type="number" formControlName="decimalPlaces">
      </label><br><br>
      <label>
        Decimal Character:
        <input type="text" formControlName="decimalChar">
      </label><br><br>
      <label>
        Thousand Separator:
        <input type="text" formControlName="thousandSeparator">
      </label><br><br>

      <button type="submit">Save</button>
      <button type="button" (click)="closeForm()">Cancel</button>
    </form>
  </div>
</div>


---

✅ Final Notes

Ensure ReactiveFormsModule is imported in your module.

Make sure your backend API at http://localhost:8080/api/currencies is up and running.

This code avoids ng prefixes and uses standard Angular binding.


Let me know if you need help with the backend API in Spring Boot or Node.js.
