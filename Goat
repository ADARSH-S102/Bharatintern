<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>yaml-ui</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>Yaml UI</name>
    <description>Spring Boot project to parse YAML and render UI using Thymeleaf</description>

    <properties>
        <java.version>17</java.version>
        <spring.boot.version>3.2.5</spring.boot.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Thymeleaf templating engine -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- YAML parsing with SnakeYAML -->
        <dependency>
            <groupId>org.yaml</groupId>
            <artifactId>snakeyaml</artifactId>
            <version>2.2</version>
        </dependency>

        <!-- Optional: DevTools for hot reload -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Optional: Testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Spring Boot Maven Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>










Sure! Below is a complete working example of a **Spring Boot + Thymeleaf** application that:

* Parses a YAML file.
* Displays each `applicationComponent` as a **tab**.
* Shows related data under each tab in a **table format**.

---

### üßæ Sample `components.yaml` File (placed in `src/main/resources/`)

```yaml
components:
  - applicationComponent: "User Service"
    details:
      - name: "Login"
        type: "REST API"
        status: "Active"
      - name: "Register"
        type: "REST API"
        status: "Active"

  - applicationComponent: "Payment Service"
    details:
      - name: "Initiate Payment"
        type: "SOAP API"
        status: "Active"
      - name: "Refund"
        type: "SOAP API"
        status: "Inactive"
```

---

### üìÅ Project Structure

```
src/
‚îú‚îÄ‚îÄ main/
‚îÇ   ‚îú‚îÄ‚îÄ java/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ com.example.yamlui/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ YamlUiApplication.java
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ controller/YamlController.java
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ model/Component.java
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ model/Detail.java
‚îÇ   ‚îî‚îÄ‚îÄ resources/
‚îÇ       ‚îú‚îÄ‚îÄ templates/components.html
‚îÇ       ‚îú‚îÄ‚îÄ application.yml
‚îÇ       ‚îî‚îÄ‚îÄ components.yaml
```

---

### üß© Model Classes

#### `Component.java`

```java
package com.example.yamlui.model;

import java.util.List;

public class Component {
    private String applicationComponent;
    private List<Detail> details;

    // Getters and setters
    public String getApplicationComponent() {
        return applicationComponent;
    }

    public void setApplicationComponent(String applicationComponent) {
        this.applicationComponent = applicationComponent;
    }

    public List<Detail> getDetails() {
        return details;
    }

    public void setDetails(List<Detail> details) {
        this.details = details;
    }
}
```

#### `Detail.java`

```java
package com.example.yamlui.model;

public class Detail {
    private String name;
    private String type;
    private String status;

    // Getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }
}
```

---

### üß† YAML Parsing and Controller

#### `YamlController.java`

```java
package com.example.yamlui.controller;

import com.example.yamlui.model.Component;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.TypeDescription;
import org.yaml.snakeyaml.constructor.Constructor;

import java.io.InputStream;
import java.util.List;
import java.util.Map;

@Controller
public class YamlController {

    @GetMapping("/components")
    public String getComponents(Model model) {
        try {
            Constructor constructor = new Constructor(ComponentsWrapper.class);
            TypeDescription wrapperDesc = new TypeDescription(ComponentsWrapper.class);
            wrapperDesc.addPropertyParameters("components", Component.class);
            constructor.addTypeDescription(wrapperDesc);

            Yaml yaml = new Yaml(constructor);
            InputStream inputStream = new ClassPathResource("components.yaml").getInputStream();
            ComponentsWrapper wrapper = yaml.load(inputStream);

            model.addAttribute("components", wrapper.getComponents());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "components";
    }

    public static class ComponentsWrapper {
        private List<Component> components;

        public List<Component> getComponents() {
            return components;
        }

        public void setComponents(List<Component> components) {
            this.components = components;
        }
    }
}
```

---

### üñºÔ∏è Thymeleaf Template

#### `components.html`

```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Application Components</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
</head>
<body>
<div class="container mt-4">
    <h2>Application Components</h2>
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" th:each="component, iterStat : ${components}">
            <a class="nav-link" th:classappend="${iterStat.index == 0} ? 'active'" 
               th:href="'#tab' + ${iterStat.index}" data-bs-toggle="tab" 
               th:text="${component.applicationComponent}" role="tab"></a>
        </li>
    </ul>

    <div class="tab-content mt-3">
        <div class="tab-pane fade show" th:classappend="${iterStat.index == 0} ? 'active'" 
             th:each="component, iterStat : ${components}" 
             th:id="'tab' + ${iterStat.index}" role="tabpanel">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <tr th:each="detail : ${component.details}">
                        <td th:text="${detail.name}">Name</td>
                        <td th:text="${detail.type}">Type</td>
                        <td th:text="${detail.status}">Status</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
```

---

### üöÄ Main Application

#### `YamlUiApplication.java`

```java
package com.example.yamlui;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class YamlUiApplication {
    public static void main(String[] args) {
        SpringApplication.run(YamlUiApplication.class, args);
    }
}
```

---

### ‚úÖ To Run:

1. Place the YAML file in `src/main/resources/components.yaml`.
2. Run the Spring Boot app.
3. Visit: [http://localhost:8080/components](http://localhost:8080/components)

---

Would you like me to send this as a ZIP project or provide a GitHub-style README too?
