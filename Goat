 import pandas as pd
import gradio as gr
from collections import defaultdict

def load_file(file):
    try:
        df = pd.read_csv(file).astype(str)
        return df, gr.update(choices=list(df.columns), value=None)
    except Exception as e:
        return pd.DataFrame(), gr.update(choices=[], value=None)

def update_columns(df):
    return gr.update(choices=list(df.columns), value=None)

def reconcile(algo_df, star_df, algo_key_col, star_key_col, file_type, exclusion_col, operator, exclusion_value):
    if algo_df.empty or star_df.empty:
        return pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), "Error: Missing input files."

    if algo_key_col not in algo_df.columns or star_key_col not in star_df.columns:
        return pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), "Error: Invalid key column selection."

    df_algo = algo_df.copy()
    df_star = star_df.copy()

    # Apply exclusion
    excluded_df = pd.DataFrame()
    values = [v.strip() for v in exclusion_value.split(',') if v.strip()]
    
    if file_type == "ALGO" and exclusion_col in df_algo.columns:
        if operator == "=":
            excluded_df = df_algo[df_algo[exclusion_col].isin(values)]
            df_algo = df_algo[~df_algo[exclusion_col].isin(values)]
        else:
            excluded_df = df_algo[~df_algo[exclusion_col].isin(values)]
            df_algo = df_algo[df_algo[exclusion_col].isin(values)]

    elif file_type == "STAR" and exclusion_col in df_star.columns:
        if operator == "=":
            excluded_df = df_star[df_star[exclusion_col].isin(values)]
            df_star = df_star[~df_star[exclusion_col].isin(values)]
        else:
            excluded_df = df_star[~df_star[exclusion_col].isin(values)]
            df_star = df_star[df_star[exclusion_col].isin(values)]

    # Key extraction
    algo_keys = df_algo[algo_key_col].astype(str).str.strip().tolist()
    star_keys = df_star[star_key_col].astype(str).str.strip().tolist()

    matched = []
    unmatched = []

    star_key_map = defaultdict(list)
    for idx, key in enumerate(star_keys):
        star_key_map[key].append(idx)

    matched_star_indices = set()
    matched_algo_indices = set()
    star_key_used_count = defaultdict(int)

    for i, algo_key in enumerate(algo_keys):
        matching_star_idxs = star_key_map.get(algo_key, [])
        if len(matching_star_idxs) == 1 and matching_star_idxs[0] not in matched_star_indices:
            matched.append({
                "ALGO Key": algo_key,
                "STAR Key": star_keys[matching_star_idxs[0]],
                "Status": "Match"
            })
            matched_star_indices.add(matching_star_idxs[0])
            matched_algo_indices.add(i)
            star_key_used_count[star_keys[matching_star_idxs[0]]] += 1
        elif len(matching_star_idxs) > 1:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<Multiple STAR Match>",
                "Status": "Mismatch - Multiple STAR Keys"
            })
            for idx in matching_star_idxs:
                unmatched.append({
                    "ALGO Key": "<No Match>",
                    "STAR Key": star_keys[idx],
                    "Status": "Mismatch - STAR Key in Multiple Match"
                })
            matched_algo_indices.add(i)
            for idx in matching_star_idxs:
                star_key_used_count[star_keys[idx]] += 1
        else:
            unmatched.append({
                "ALGO Key": algo_key,
                "STAR Key": "<No Match>",
                "Status": "Mismatch - No STAR Match"
            })

    for idx, star_key in enumerate(star_keys):
        if idx not in matched_star_indices and star_key_used_count[star_key] == 0:
            unmatched.append({
                "ALGO Key": "<No Match>",
                "STAR Key": star_key,
                "Status": "Mismatch - No ALGO Match"
            })

    matched_df = pd.DataFrame(matched)
    unmatched_df = pd.DataFrame(unmatched)

    summary = (
        f"Matched Records: {len(matched_df)}\n"
        f"Unmatched Records: {len(unmatched_df)}\n"
        f"Excluded Records: {len(excluded_df)}"
    )

    return excluded_df, matched_df, unmatched_df, summary

with gr.Blocks() as demo:
    gr.Markdown("## Reconciliation App with Exclusion and Custom Matching Keys")

    algo_df_state = gr.State(pd.DataFrame())
    star_df_state = gr.State(pd.DataFrame())

    with gr.Row():
        algo_file = gr.File(label="Upload ALGO CSV")
        star_file = gr.File(label="Upload STAR CSV")

    with gr.Row():
        algo_key_dropdown = gr.Dropdown(label="Select ALGO Key Column")
        star_key_dropdown = gr.Dropdown(label="Select STAR Key Column")

    with gr.Row():
        file_selector = gr.Dropdown(["ALGO", "STAR"], label="Apply Exclusion On")
        exclusion_column = gr.Dropdown(label="Column for Exclusion")
        operator_input = gr.Dropdown(["=", "!="], label="Operator")
        value_input = gr.Textbox(label="Value(s) for Exclusion (comma-separated)")

    run_btn = gr.Button("Run Reconciliation")

    excluded_out = gr.Dataframe(label="Excluded Records")
    matched_out = gr.Dataframe(label="Matched Records")
    unmatched_out = gr.Dataframe(label="Unmatched Records")
    summary_out = gr.Textbox(label="Summary")

    algo_file.change(fn=load_file, inputs=algo_file, outputs=[algo_df_state, algo_key_dropdown])
    star_file.change(fn=load_file, inputs=star_file, outputs=[star_df_state, star_key_dropdown])
    file_selector.change(fn=update_columns, inputs=[algo_df_state], outputs=exclusion_column)

    run_btn.click(
        reconcile,
        inputs=[
            algo_df_state, star_df_state,
            algo_key_dropdown, star_key_dropdown,
            file_selector, exclusion_column, operator_input, value_input
        ],
        outputs=[excluded_out, matched_out, unmatched_out, summary_out]
    )

demo.launch()























Here is the complete set of Java files in copy code format:


---

1. ReconciliationController.java

package com.example.demo.controller;

import com.example.demo.model.ReconciliationResult;
import com.example.demo.service.ReconciliationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/reconcile")
public class ReconciliationController {

    @Autowired
    private ReconciliationService reconciliationService;

    private final String algoPath = "C:\\Users\\59944\\OneDrive\\Desktop\\test\\Initial_Margin_800_28258387.csv";
    private final String starPath = "C:\\Users\\59944\\OneDrive\\Desktop\\test\\STARALGONEW_3428_20250387_1.csv";

    @GetMapping("/exclude")
    public ReconciliationResult exclude() {
        return reconciliationService.excludeAndTransform(algoPath, starPath);
    }

    @GetMapping("/nonexcluded")
    public ReconciliationResult getNonExcluded() {
        return reconciliationService.getNonExcluded();
    }

    @GetMapping("/match/{type}")
    public ReconciliationResult match(@PathVariable String type) {
        return reconciliationService.match(type);
    }
}


---

2. ReconciliationService.java

package com.example.demo.service;

import com.example.demo.model.Record;
import com.example.demo.model.ReconciliationResult;
import com.example.demo.util.CsvUtil;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class ReconciliationService {

    private List<Record> algoRecords = new ArrayList<>();
    private List<Record> starRecords = new ArrayList<>();
    private List<Record> excludedRecords = new ArrayList<>();
    private List<Record> nonExcludedAlgo = new ArrayList<>();
    private List<Record> nonExcludedStar = new ArrayList<>();

    public ReconciliationResult excludeAndTransform(String algoPath, String starPath) {
        algoRecords = CsvUtil.readCsv(algoPath);
        starRecords = CsvUtil.readCsv(starPath);

        excludedRecords = algoRecords.stream()
                .filter(r -> r.getAmount() == 0)
                .collect(Collectors.toList());

        nonExcludedAlgo = algoRecords.stream()
                .filter(r -> r.getAmount() != 0)
                .collect(Collectors.toList());

        nonExcludedStar = starRecords;

        return new ReconciliationResult(new ArrayList<>(), new ArrayList<>(), excludedRecords, nonExcludedAlgo.size(), nonExcludedStar.size());
    }

    public ReconciliationResult getNonExcluded() {
        return new ReconciliationResult(nonExcludedAlgo, nonExcludedStar, new ArrayList<>(), nonExcludedAlgo.size(), nonExcludedStar.size());
    }

    public ReconciliationResult match(String type) {
        List<Record> matched = new ArrayList<>();

        for (Record algo : nonExcludedAlgo) {
            for (Record star : nonExcludedStar) {
                if (algo.getKey().equals(star.getKey()) && algo.getAmount() == star.getAmount()) {
                    matched.add(algo);
                    break;
                }
            }
        }

        List<Record> unmatchedAlgo = nonExcludedAlgo.stream()
                .filter(r -> !matched.contains(r))
                .collect(Collectors.toList());

        return new ReconciliationResult(matched, unmatchedAlgo, excludedRecords, nonExcludedAlgo.size(), nonExcludedStar.size());
    }
}


---

3. ReconciliationResult.java

package com.example.demo.model;

import java.util.List;

public class ReconciliationResult {

    private List<Record> matched;
    private List<Record> unmatched;
    private List<Record> excluded;

    private int matchedCount;
    private int unmatchedCount;
    private int excludedCount;
    private int nonExcludedAlgoCount;
    private int nonExcludedStarCount;

    public ReconciliationResult(List<Record> matched, List<Record> unmatched, List<Record> excluded, int nonExcludedAlgoCount, int nonExcludedStarCount) {
        this.matched = matched;
        this.unmatched = unmatched;
        this.excluded = excluded;
        this.matchedCount = matched.size();
        this.unmatchedCount = unmatched.size();
        this.excludedCount = excluded.size();
        this.nonExcludedAlgoCount = nonExcludedAlgoCount;
        this.nonExcludedStarCount = nonExcludedStarCount;
    }

    public List<Record> getMatched() { return matched; }
    public List<Record> getUnmatched() { return unmatched; }
    public List<Record> getExcluded() { return excluded; }

    public int getMatchedCount() { return matchedCount; }
    public int getUnmatchedCount() { return unmatchedCount; }
    public int getExcludedCount() { return excludedCount; }
    public int getNonExcludedAlgoCount() { return nonExcludedAlgoCount; }
    public int getNonExcludedStarCount() { return nonExcludedStarCount; }
}


---

4. Record.java

package com.example.demo.model;

public class Record {

    private String key;
    private double amount;

    public Record() {}

    public Record(String key, double amount) {
        this.key = key;
        this.amount = amount;
    }

    public String getKey() { return key; }
    public void setKey(String key) { this.key = key; }

    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
}


---

5. CsvUtil.java

package com.example.demo.util;

import com.example.demo.model.Record;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;

import java.io.FileReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;

public class CsvUtil {

    public static List<Record> readCsv(String filePath) {
        List<Record> records = new ArrayList<>();
        try {
            Reader in = new FileReader(filePath);
            Iterable<CSVRecord> csvRecords = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(in);
            for (CSVRecord record : csvRecords) {
                String key = record.get("Key");
                double amount = Double.parseDouble(record.get("Amount"));
                records.add(new Record(key, amount));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return records;
    }
}


---

Test on localhost

After starting the Spring Boot application, use these endpoints in your browser or Postman:

http://localhost:8080/reconcile/exclude – performs exclusion

http://localhost:8080/reconcile/nonexcluded – shows non-excluded ALGO and STAR with counts

http://localhost:8080/reconcile/match/1to1 – shows matched records and counts after exclusion


Let me know if you want to add DB integration or more matching rules.


                                                        nonExcludedAlgo.size(),
                
