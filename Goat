Thanks! Since you're using **SQL Developer**, you're working with **Oracle Database**.

Here's the correct and Oracle-compatible SQL code to create the `currencies` table, including identity-based auto-increment for the `id` column.

---

### ✅ Oracle SQL: Create `currencies` Table

```sql
CREATE TABLE currencies (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    abbr VARCHAR2(10) NOT NULL,
    description VARCHAR2(100) NOT NULL,
    decimal_places NUMBER(2) NOT NULL,
    decimal_char CHAR(1) NOT NULL,
    thousand_separator CHAR(1) NOT NULL
);
```

---

### Sample Insert (optional)

```sql
INSERT INTO currencies (abbr, description, decimal_places, decimal_char, thousand_separator)
VALUES ('USD', 'US Dollar', 2, '.', ',');

INSERT INTO currencies (abbr, description, decimal_places, decimal_char, thousand_separator)
VALUES ('INR', 'Indian Rupee', 2, '.', ',');
```

Let me know if you need the backend API code (Java Spring Boot or Node.js) to connect this to your Angular app.















---

✅ Step-by-Step Fix:

1. Make sure ReactiveFormsModule is imported in app.module.ts:

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule } from '@angular/forms'; // required!

import { AppComponent } from './app.component';
import { HomeComponent } from './home/home.component';

@NgModule({
  declarations: [AppComponent, HomeComponent],
  imports: [
    BrowserModule,
    ReactiveFormsModule // make sure this is added
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}


---

2. Full working home.component.ts:

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {
  currencyForm!: FormGroup;  // NOTICE the use of ! to tell TypeScript it's assigned later

  currencies: any[] = [];
  showModal = false;
  isEdit = false;
  editId: number | null = null;

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.currencyForm = this.fb.group({
      abbr: ['', Validators.required],
      description: ['', Validators.required],
      decimalPlaces: [2, [Validators.required, Validators.min(0)]],
      decimalChar: ['.', Validators.required],
      thousandSeparator: [',', Validators.required]
    });
  }

  openModal(edit: boolean = false, currency?: any): void {
    this.showModal = true;
    this.isEdit = edit;

    if (edit && currency) {
      this.editId = currency.id;
      this.currencyForm.setValue({
        abbr: currency.abbr,
        description: currency.description,
        decimalPlaces: currency.decimalPlaces,
        decimalChar: currency.decimalChar,
        thousandSeparator: currency.thousandSeparator
      });
    } else {
      this.editId = null;
      this.currencyForm.reset({
        abbr: '',
        description: '',
        decimalPlaces: 2,
        decimalChar: '.',
        thousandSeparator: ','
      });
    }
  }

  closeModal(): void {
    this.showModal = false;
    this.currencyForm.reset();
  }

  saveCurrency(): void {
    if (this.currencyForm.invalid) return;

    const formValue = this.currencyForm.value;

    if (this.isEdit && this.editId !== null) {
      const index = this.currencies.findIndex(c => c.id === this.editId);
      if (index > -1) {
        this.currencies[index] = { id: this.editId, ...formValue };
      }
    } else {
      const newId = this.currencies.length > 0 ? Math.max(...this.currencies.map(c => c.id)) + 1 : 1;
      this.currencies.push({ id: newId, ...formValue });
    }

    this.closeModal();
  }

  deleteCurrency(id: number): void {
    this.currencies = this.currencies.filter(c => c.id !== id);
  }
}


---

Let me know if you want me to:

Share the latest home.component.html again.

Add styling or validation messages.

Connect this to a backend API.


I'll help until it runs 100% clean.

















import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {

  currencyForm: FormGroup;
  currencies: {
    id: number;
    abbr: string;
    description: string;
    decimalPlaces: number;
    decimalChar: string;
    thousandSeparator: string;
  }[] = [];

  showModal = false;
  isEdit = false;
  editId: number | null = null;

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.currencyForm = this.fb.group({
      abbr: ['', Validators.required],
      description: ['', Validators.required],
      decimalPlaces: [2, [Validators.required, Validators.min(0)]],
      decimalChar: ['.', Validators.required],
      thousandSeparator: [',', Validators.required]
    });
  }

  openModal(edit: boolean = false, currency?: any): void {
    this.showModal = true;
    this.isEdit = edit;

    if (edit && currency) {
      this.editId = currency.id;
      this.currencyForm.setValue({
        abbr: currency.abbr || '',
        description: currency.description || '',
        decimalPlaces: currency.decimalPlaces || 2,
        decimalChar: currency.decimalChar || '.',
        thousandSeparator: currency.thousandSeparator || ','
      });
    } else {
      this.editId = null;
      this.currencyForm.reset({
        abbr: '',
        description: '',
        decimalPlaces: 2,
        decimalChar: '.',
        thousandSeparator: ','
      });
    }
  }

  closeModal(): void {
    this.showModal = false;
    this.currencyForm.reset();
  }

  saveCurrency(): void {
    if (this.currencyForm.invalid) return;

    const formValue = this.currencyForm.value;

    if (this.isEdit && this.editId !== null) {
      const index = this.currencies.findIndex(c => c.id === this.editId);
      if (index > -1) {
        this.currencies[index] = { id: this.editId, ...formValue };
      }
    } else {
      const newId = this.currencies.length > 0 ? Math.max(...this.currencies.map(c => c.id)) + 1 : 1;
      this.currencies.push({ id: newId, ...formValue });
    }

    this.closeModal();
  }

  deleteCurrency(id: number): void {
    this.currencies = this.currencies.filter(c => c.id !== id);
  }
}

















<div class="toolbar">
  <button type="button" (click)="openModal()">+ Add Currency</button>
</div>

<table border="1" cellpadding="8" cellspacing="0">
  <thead>
    <tr>
      <th>Abbreviation</th>
      <th>Description</th>
      <th>Decimal Places</th>
      <th>Decimal Char</th>
      <th>Thousand Separator</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let currency of currencies">
      <td>{{ currency.abbr }}</td>
      <td>{{ currency.description }}</td>
      <td>{{ currency.decimalPlaces }}</td>
      <td>{{ currency.decimalChar }}</td>
      <td>{{ currency.thousandSeparator }}</td>
      <td>
        <button type="button" (click)="openModal(true, currency)">Edit</button>
        <button type="button" (click)="deleteCurrency(currency.id)">Delete</button>
      </td>
    </tr>
  </tbody>
</table>

<!-- Modal for Add/Edit -->
<div *ngIf="showModal" class="modal">
  <form [formGroup]="currencyForm" (ngSubmit)="saveCurrency()">
    <h3>{{ isEdit ? 'Edit Currency' : 'Add Currency' }}</h3>

    <div>
      <label>Abbreviation:</label>
      <input type="text" formControlName="abbr" />
    </div>

    <div>
      <label>Description:</label>
      <input type="text" formControlName="description" />
    </div>

    <div>
      <label>Decimal Places:</label>
      <input type="number" formControlName="decimalPlaces" />
    </div>

    <div>
      <label>Decimal Char:</label>
      <input type="text" formControlName="decimalChar" maxlength="1" />
    </div>

    <div>
      <label>Thousand Separator:</label>
      <input type="text" formControlName="thousandSeparator" maxlength="1" />
    </div>

    <div style="margin-top: 10px;">
      <button type="submit" [disabled]="currencyForm.invalid">Save</button>
      <button type="button" (click)="closeModal()">Cancel</button>
    </div>
  </form>
</div>















Sure! Below is the full Angular code without using ngModel, ngIf, or other template-driven (ng-prefixed) syntax. Instead, this uses Reactive Forms and explicit *ngIf control via component logic.


---

1. currencies.component.ts (Logic using Reactive Forms)

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CurrencyService } from '../currency.service';

@Component({
  selector: 'app-currencies',
  templateUrl: './currencies.component.html',
  styleUrls: ['./currencies.component.css']
})
export class CurrenciesComponent implements OnInit {
  currencies: any[] = [];
  currencyForm: FormGroup;
  showModal = false;
  isEdit = false;
  currentId: number | null = null;

  constructor(private currencyService: CurrencyService, private fb: FormBuilder) {
    this.currencyForm = this.fb.group({
      abbr: ['', Validators.required],
      description: ['', Validators.required],
      decimalPlaces: [0, [Validators.required, Validators.min(0)]],
      decimalChar: ['', [Validators.required, Validators.maxLength(1)]],
      thousandSeparator: ['', [Validators.required, Validators.maxLength(1)]]
    });
  }

  ngOnInit() {
    this.getCurrencies();
  }

  getCurrencies() {
    this.currencyService.getAll().subscribe(data => this.currencies = data);
  }

  openModal(edit: boolean = false, currency: any = null) {
    this.showModal = true;
    this.isEdit = edit;
    this.currencyForm.reset();

    if (edit && currency) {
      this.currencyForm.patchValue(currency);
      this.currentId = currency.id;
    } else {
      this.currentId = null;
    }
  }

  closeModal() {
    this.showModal = false;
    this.currencyForm.reset();
  }

  saveCurrency() {
    if (this.currencyForm.invalid) return;

    const payload = this.currencyForm.value;

    if (this.isEdit && this.currentId != null) {
      this.currencyService.update(this.currentId, payload).subscribe(() => {
        this.getCurrencies();
        this.closeModal();
      });
    } else {
      this.currencyService.create(payload).subscribe(() => {
        this.getCurrencies();
        this.closeModal();
      });
    }
  }

  deleteCurrency(id: number) {
    this.currencyService.delete(id).subscribe(() => this.getCurrencies());
  }
}


---

2. currencies.component.html

<div class="toolbar">
  <button (click)="openModal()">+ Add Currency</button>
</div>

<table>
  <thead>
    <tr>
      <th>Abbreviation</th>
      <th>Description</th>
      <th>Decimal Places</th>
      <th>Decimal Char</th>
      <th>Thousand Separator</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let currency of currencies">
      <td>{{ currency.abbr }}</td>
      <td>{{ currency.description }}</td>
      <td>{{ currency.decimalPlaces }}</td>
      <td>{{ currency.decimalChar }}</td>
      <td>{{ currency.thousandSeparator }}</td>
      <td>
        <button (click)="openModal(true, currency)">Edit</button>
        <button (click)="deleteCurrency(currency.id)">Delete</button>
      </td>
    </tr>
  </tbody>
</table>

<!-- Modal -->
<div *ngIf="showModal" class="modal">
  <form [formGroup]="currencyForm" (submit)="saveCurrency()">
    <input type="text" formControlName="abbr" placeholder="Abbreviation" />
    <input type="text" formControlName="description" placeholder="Description" />
    <input type="number" formControlName="decimalPlaces" placeholder="Decimal Places" />
    <input type="text" formControlName="decimalChar" placeholder="Decimal Char" maxlength="1" />
    <input type="text" formControlName="thousandSeparator" placeholder="Thousand Separator" maxlength="1" />
    <div>
      <button type="submit" [disabled]="currencyForm.invalid">Save</button>
      <button type="button" (click)="closeModal()">Cancel</button>
    </div>
  </form>
</div>


---

3. currency.service.ts (Unchanged)

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class CurrencyService {
  private baseUrl = 'http://localhost:8080/api/currencies';

  constructor(private http: HttpClient) {}

  getAll() {
    return this.http.get<any[]>(this.baseUrl);
  }

  create(currency: any) {
    return this.http.post(this.baseUrl, currency);
  }

  update(id: number, currency: any) {
    return this.http.put(`${this.baseUrl}/${id}`, currency);
  }

  delete(id: number) {
    return this.http.delete(`${this.baseUrl}/${id}`);
  }
}


---

4. app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';
import { CurrenciesComponent } from './currencies/currencies.component';

@NgModule({
  declarations: [
    AppComponent,
    CurrenciesComponent
  ],
  imports: [
    BrowserModule,
    ReactiveFormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


---

5. currencies.component.css

.modal {
  background: #fff;
  padding: 20px;
  border: 1px solid #aaa;
  position: fixed;
  top: 20%;
  left: 30%;
  width: 40%;
  z-index: 1000;
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

button {
  margin: 5px;
}


---

This version avoids ngModel, ngForm, and template-driven form features — using only Reactive Forms, pure Angular bindings, and programmatic control.

Let me know if you need the Spring Boot backend again or want deployment instructions!


