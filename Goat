import pandas as pd
import gradio as gr
from collections import defaultdict

# Load CSVs
def load_csv(file):
    try:
        df = pd.read_csv(file).astype(str)
        return df, gr.update(choices=list(df.columns))
    except:
        return pd.DataFrame(), gr.update(choices=[])

# Matching logic
def reconcile(algo_df, star_df, algo_key_col, star_key_col, file_type, excl_col, operator, value):
    df_algo = algo_df.copy()
    df_star = star_df.copy()
    excluded_df = pd.DataFrame()

    values = [v.strip() for v in value.split(',') if v.strip()]

    # Apply exclusion
    if file_type == "ALGO" and excl_col in df_algo.columns:
        if operator == "=":
            excluded_df = df_algo[df_algo[excl_col].isin(values)]
            df_algo = df_algo[~df_algo[excl_col].isin(values)]
        else:
            excluded_df = df_algo[~df_algo[excl_col].isin(values)]
            df_algo = df_algo[df_algo[excl_col].isin(values)]
    elif file_type == "STAR" and excl_col in df_star.columns:
        if operator == "=":
            excluded_df = df_star[df_star[excl_col].isin(values)]
            df_star = df_star[~df_star[excl_col].isin(values)]
        else:
            excluded_df = df_star[~df_star[excl_col].isin(values)]
            df_star = df_star[df_star[excl_col].isin(values)]

    # Key extraction
    algo_keys = df_algo[algo_key_col].astype(str).str.strip().tolist()
    star_keys = df_star[star_key_col].astype(str).str.strip().tolist()

    matched, unmatched = [], []

    star_map = defaultdict(list)
    for i, key in enumerate(star_keys):
        star_map[key].append(i)

    matched_star = set()
    matched_algo = set()

    for i, akey in enumerate(algo_keys):
        if akey in star_map:
            match_ids = star_map[akey]
            if len(match_ids) == 1:
                matched.append({"ALGO Index": i, "STAR Index": match_ids[0], "Match Type": "1-1"})
            else:
                for sid in match_ids:
                    matched.append({"ALGO Index": i, "STAR Index": sid, "Match Type": "1-many"})
            matched_algo.add(i)
            matched_star.update(match_ids)
        else:
            unmatched.append({"ALGO Index": i, "STAR Index": "", "Status": "No STAR Match"})

    for j, skey in enumerate(star_keys):
        if j not in matched_star:
            unmatched.append({"ALGO Index": "", "STAR Index": j, "Status": "No ALGO Match"})

    return excluded_df, pd.DataFrame(matched), pd.DataFrame(unmatched), f"Matched: {len(matched)} | Unmatched: {len(unmatched)} | Excluded: {len(excluded_df)}"

# Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("## Reconciliation App with Matching Type Logic")

    algo_df = gr.State(pd.DataFrame())
    star_df = gr.State(pd.DataFrame())

    with gr.Row():
        algo_file = gr.File(label="Upload ALGO CSV")
        star_file = gr.File(label="Upload STAR CSV")

    with gr.Row():
        algo_key_col = gr.Dropdown(label="ALGO Key Column")
        star_key_col = gr.Dropdown(label="STAR Key Column")

    with gr.Row():
        file_type = gr.Dropdown(["ALGO", "STAR"], label="File to apply exclusion on")
        excl_col = gr.Dropdown(label="Exclusion Column")
        operator = gr.Dropdown(["=", "!="], label="Operator")
        value = gr.Textbox(label="Value(s) (comma-separated)")

    run_btn = gr.Button("Run Reconciliation")

    excluded_output = gr.Dataframe(label="Excluded Records")
    matched_output = gr.Dataframe(label="Matched Records")
    unmatched_output = gr.Dataframe(label="Unmatched Records")
    summary_output = gr.Textbox(label="Summary")

    algo_file.change(load_csv, inputs=algo_file, outputs=[algo_df, algo_key_col])
    star_file.change(load_csv, inputs=star_file, outputs=[star_df, star_key_col])
    file_type.change(
        lambda ft, adf, sdf: gr.update(choices=list(adf.columns) if ft == "ALGO" else list(sdf.columns)),
        inputs=[file_type, algo_df, star_df],
        outputs=excl_col
    )

    run_btn.click(reconcile, inputs=[
        algo_df, star_df, algo_key_col, star_key_col, file_type, excl_col, operator, value
    ], outputs=[
        excluded_output, matched_output, unmatched_output, summary_output
    ])

demo.launch()

    














Here is the complete set of Java files in copy code format:


---

1. ReconciliationController.java

package com.example.demo.controller;

import com.example.demo.model.ReconciliationResult;
import com.example.demo.service.ReconciliationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/reconcile")
public class ReconciliationController {

    @Autowired
    private ReconciliationService reconciliationService;

    private final String algoPath = "C:\\Users\\59944\\OneDrive\\Desktop\\test\\Initial_Margin_800_28258387.csv";
    private final String starPath = "C:\\Users\\59944\\OneDrive\\Desktop\\test\\STARALGONEW_3428_20250387_1.csv";

    @GetMapping("/exclude")
    public ReconciliationResult exclude() {
        return reconciliationService.excludeAndTransform(algoPath, starPath);
    }

    @GetMapping("/nonexcluded")
    public ReconciliationResult getNonExcluded() {
        return reconciliationService.getNonExcluded();
    }

    @GetMapping("/match/{type}")
    public ReconciliationResult match(@PathVariable String type) {
        return reconciliationService.match(type);
    }
}


---

2. ReconciliationService.java

package com.example.demo.service;

import com.example.demo.model.Record;
import com.example.demo.model.ReconciliationResult;
import com.example.demo.util.CsvUtil;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class ReconciliationService {

    private List<Record> algoRecords = new ArrayList<>();
    private List<Record> starRecords = new ArrayList<>();
    private List<Record> excludedRecords = new ArrayList<>();
    private List<Record> nonExcludedAlgo = new ArrayList<>();
    private List<Record> nonExcludedStar = new ArrayList<>();

    public ReconciliationResult excludeAndTransform(String algoPath, String starPath) {
        algoRecords = CsvUtil.readCsv(algoPath);
        starRecords = CsvUtil.readCsv(starPath);

        excludedRecords = algoRecords.stream()
                .filter(r -> r.getAmount() == 0)
                .collect(Collectors.toList());

        nonExcludedAlgo = algoRecords.stream()
                .filter(r -> r.getAmount() != 0)
                .collect(Collectors.toList());

        nonExcludedStar = starRecords;

        return new ReconciliationResult(new ArrayList<>(), new ArrayList<>(), excludedRecords, nonExcludedAlgo.size(), nonExcludedStar.size());
    }

    public ReconciliationResult getNonExcluded() {
        return new ReconciliationResult(nonExcludedAlgo, nonExcludedStar, new ArrayList<>(), nonExcludedAlgo.size(), nonExcludedStar.size());
    }

    public ReconciliationResult match(String type) {
        List<Record> matched = new ArrayList<>();

        for (Record algo : nonExcludedAlgo) {
            for (Record star : nonExcludedStar) {
                if (algo.getKey().equals(star.getKey()) && algo.getAmount() == star.getAmount()) {
                    matched.add(algo);
                    break;
                }
            }
        }

        List<Record> unmatchedAlgo = nonExcludedAlgo.stream()
                .filter(r -> !matched.contains(r))
                .collect(Collectors.toList());

        return new ReconciliationResult(matched, unmatchedAlgo, excludedRecords, nonExcludedAlgo.size(), nonExcludedStar.size());
    }
}


---

3. ReconciliationResult.java

package com.example.demo.model;

import java.util.List;

public class ReconciliationResult {

    private List<Record> matched;
    private List<Record> unmatched;
    private List<Record> excluded;

    private int matchedCount;
    private int unmatchedCount;
    private int excludedCount;
    private int nonExcludedAlgoCount;
    private int nonExcludedStarCount;

    public ReconciliationResult(List<Record> matched, List<Record> unmatched, List<Record> excluded, int nonExcludedAlgoCount, int nonExcludedStarCount) {
        this.matched = matched;
        this.unmatched = unmatched;
        this.excluded = excluded;
        this.matchedCount = matched.size();
        this.unmatchedCount = unmatched.size();
        this.excludedCount = excluded.size();
        this.nonExcludedAlgoCount = nonExcludedAlgoCount;
        this.nonExcludedStarCount = nonExcludedStarCount;
    }

    public List<Record> getMatched() { return matched; }
    public List<Record> getUnmatched() { return unmatched; }
    public List<Record> getExcluded() { return excluded; }

    public int getMatchedCount() { return matchedCount; }
    public int getUnmatchedCount() { return unmatchedCount; }
    public int getExcludedCount() { return excludedCount; }
    public int getNonExcludedAlgoCount() { return nonExcludedAlgoCount; }
    public int getNonExcludedStarCount() { return nonExcludedStarCount; }
}


---

4. Record.java

package com.example.demo.model;

public class Record {

    private String key;
    private double amount;

    public Record() {}

    public Record(String key, double amount) {
        this.key = key;
        this.amount = amount;
    }

    public String getKey() { return key; }
    public void setKey(String key) { this.key = key; }

    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
}


---

5. CsvUtil.java

package com.example.demo.util;

import com.example.demo.model.Record;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;

import java.io.FileReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;

public class CsvUtil {

    public static List<Record> readCsv(String filePath) {
        List<Record> records = new ArrayList<>();
        try {
            Reader in = new FileReader(filePath);
            Iterable<CSVRecord> csvRecords = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(in);
            for (CSVRecord record : csvRecords) {
                String key = record.get("Key");
                double amount = Double.parseDouble(record.get("Amount"));
                records.add(new Record(key, amount));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return records;
    }
}


---

Test on localhost

After starting the Spring Boot application, use these endpoints in your browser or Postman:

http://localhost:8080/reconcile/exclude – performs exclusion

http://localhost:8080/reconcile/nonexcluded – shows non-excluded ALGO and STAR with counts

http://localhost:8080/reconcile/match/1to1 – shows matched records and counts after exclusion


Let me know if you want to add DB integration or more matching rules.


                                                        nonExcludedAlgo.size(),
                
