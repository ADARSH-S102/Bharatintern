Thanks for sharing your folder structure. Based on your Angular layout (src/app/components/home/), here’s what you should do to fix your import and component errors:


---

✅ app.module.ts

Make sure you import the HomeComponent and necessary Angular modules correctly:

// src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';
import { HomeComponent } from './components/home/home.component';
import { HomeService } from './components/home/home.service';

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule
  ],
  providers: [HomeService],
  bootstrap: [AppComponent]
})
export class AppModule { }


---

✅ home.component.ts

This version ensures currencyForm is properly initialized:

// src/app/components/home/home.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HomeService } from './home.service';
import { Currency } from './home.model';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {
  currencyForm: FormGroup;
  currencies: Currency[] = [];
  showForm = false;

  constructor(private fb: FormBuilder, private homeService: HomeService) {
    this.currencyForm = this.fb.group({
      abbr: ['', Validators.required],
      description: ['', Validators.required],
      decimalPlaces: [2, [Validators.required, Validators.min(0)]],
      decimalChar: ['.', Validators.required],
      thousandSeparator: [',', Validators.required]
    });
  }

  ngOnInit() {
    this.getCurrencies();
  }

  getCurrencies() {
    this.homeService.getCurrencies().subscribe((data: Currency[]) => {
      this.currencies = data;
    });
  }

  toggleForm() {
    this.showForm = !this.showForm;
  }

  saveCurrency() {
    if (this.currencyForm.valid) {
      const newCurrency = this.currencyForm.value;
      this.homeService.addCurrency(newCurrency).subscribe(() => {
        this.getCurrencies();
        this.currencyForm.reset();
        this.showForm = false;
      });
    }
  }
}


---

Would you also like me to resend the home.component.html and home.service.ts based on this structure and logic?

  
